<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  <subtitle>Tech blog</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://jason0853.github.io/"/>
  <updated>2019-05-18T06:10:55.393Z</updated>
  <id>http://jason0853.github.io/</id>
  
  <author>
    <name>Jason Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Basic</title>
    <link href="http://jason0853.github.io/2018/08/15/React-Basic/"/>
    <id>http://jason0853.github.io/2018/08/15/React-Basic/</id>
    <published>2018-08-15T05:51:56.000Z</published>
    <updated>2019-05-18T06:10:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/react/react-logo.png" alt=""></p><p>오랜만에 Velopert 님의 인프런 강의(<strong>리액트</strong>)를 보고 정리하는 차원에서 리액트 관련 포스팅을 작성해보겠습니다.</p><h3 id="Use-Create-React-App"><a href="#Use-Create-React-App" class="headerlink" title="# Use Create-React-App"></a># Use Create-React-App</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app react-basic</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> react-basic</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><ul><li>Facebook 에서 제공하는 <strong>create-react-app</strong> CLI 툴을 사용하여 리액트 프로젝트를 사용하였습니다.</li></ul><h3 id="jsconfig-json-and-eslintrc"><a href="#jsconfig-json-and-eslintrc" class="headerlink" title="# jsconfig.json and .eslintrc"></a># jsconfig.json and .eslintrc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add --dev prettier-eslint</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch jsconfig.json .eslintrc</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>jsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//(중략...)</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "NODE_PATH=src react-scripts start",</span><br><span class="line">    "build": "NODE_PATH=src react-scripts build",</span><br><span class="line">    "test": "react-scripts test --env=jsdom",</span><br><span class="line">    "eject": "react-scripts eject"</span><br><span class="line">  &#125;,</span><br><span class="line">//(중략...)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"react-app"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"quotes"</span>: [<span class="string">"error"</span>, <span class="string">"single"</span>, &#123; <span class="attr">"avoidEscape"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="attr">"indent"</span>: [<span class="string">"error"</span>, <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>baseUrl</code> 옵션에 src 폴더를 root 로 지정해줍니다.</li><li>서버를 실행하는 명령어 구문에 <code>NODE_PATH=src</code>를 추가해줍니다.</li><li><strong>prettier-eslint</strong>는 코드를 일관성 있게 작성해주는 package 입니다.</li></ul><h3 id="JSX"><a href="#JSX" class="headerlink" title="# JSX"></a># JSX</h3><p>React 를 이제 본격적으로 시작해보겠습니다. 리액트에는 <strong>JSX</strong>라는 특이한 문법을 가지고 있는데 이 syntax 에 대해 다뤄보겠습니다.</p><script src="//gist.github.com/90306ee3a10d7b8d5e762112f6aea996.js"></script><ul><li><code>class</code>가 아닌 <code>className</code>이라고 사용하는 것이 올바른 convention 입니다.</li><li>스타일을 작성할 때도 객체로 작성하셔야합니다. 기존 css 에서 스타일 주는 것과 차이점은 property 를 대쉬(-)가 아닌 camelCase 로 작성하셔야합니다.</li><li>배열의 있는 값들을 반복문으로 순환할 때는 <code>map</code> 메소드를 사용하여 새로운 배열로 반환시킵니다. 주의할 점은 리액트에서 배열을 렌더링을 할 때 꼭 필요한 것이 <code>key</code>값입니다. <code>key</code>라는 고유한 값을 통하여 배열의 값이 변경될 때 성능 최적화를 시킬 수 잇습니다.</li><li>jsx 문법에서 가장 좋은 점은 자바스크립트 문법을 자유롭게 사용할 수 있는 것입니다. 위에서 보신바와 같이 <code>&amp;&amp;</code> 연산자를 사용할 수 있고 삼항연산자를 사용할 수도 있습니다.<br>예) <code>completed ? <b>success</b> : <del>fail</del></code></li></ul><ul><li>컴포넌트에서 DOM 태그를 리턴시킬 때 항상 닫힌 태그여야하며 상위 Element 가 존재하여야합니다. 상위 Element 를 피하고 싶은 경우에는 <code>Fragment</code>를 이용하시기 바랍니다.</li></ul><h3 id="Props-amp-amp-State"><a href="#Props-amp-amp-State" class="headerlink" title="# Props &amp;&amp; State"></a># Props &amp;&amp; State</h3><p>이제부터는 리액트에서 가장 중요한 개념이라고 생각되는 <strong>props</strong> 와 <strong>state</strong> 에 대해 다뤄보겠습니다.</p><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>리액트에서 자식 컴포넌트로 값을 전달해줄때 props 를 이용합니다. 하지만 값을 전달만 할 뿐이지 직접 수정할 수는 없습니다.</p><script src="//gist.github.com/b4aae8028d3e914145042cd3dcca4d1c.js"></script><ul><li><code>MyName</code> 이라는 컴포넌트를 만들어 <code>App</code> 컴포넌트에서 렌더링 시켜줍니다.</li></ul><ul><li><p><code>name</code>이라는 props 를 주게 되면 할당된 값이 전달됩니다. 하지만 props 를 전달해주지 않으면 <code>defaultProps</code>에 미리 정의된 값이 노출됩니다.</p></li><li><p>함수형 컴포넌트로 만들어서 렌더링 시킬 경우 미세하게나마 성능이 향상됩니다.</p></li></ul><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>컴포넌트 내부에서 state 값을 선언할 수 있으며 수정할 수 있습니다.</p><script src="//gist.github.com/787953947e4a160fbf15a7860cf1c9e3.js"></script><ul><li>state 값을 선언하고 나서 값을 수정하고 싶은 경우 항상 <code>setState</code>함수를 이용하여 값을 변경해야합니다.</li><li>Arrow function 을 사용해서 함수를 생성한다면 이벤트에 bind 할 때 this 문제를 해결할 수 있습니다.</li></ul><h3 id="LifeCycle-API"><a href="#LifeCycle-API" class="headerlink" title="# LifeCycle API"></a># LifeCycle API</h3><p>아래 코드는 velopert 님 강의에서 나온 코드 위주로 정리한 <strong>LifeCycle API</strong> 자료입니다.</p><script src="//gist.github.com/39076d4bfd844b863647c033989467b0.js"></script><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>Velopert 님의 인프런 강의 내용이 워낙 알차다보니 정리하고 넘어가면 좋을것 같아서 포스팅하게 되었습니다. 기초로 돌아가 공부하다 보면 프로젝트 진행하면서 제가 아쉽게 짜던 코드들이 기억이 남습니다. 예를 들면 LifeCycle API 를 잘 사용했다면 좀 더 쉽게 구현할 수 있었을텐데 하는 아쉬움 같은거 말이죠?ㅋㅋㅋ</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.inflearn.com/course/react-velopert/" target="_blank" rel="noopener">누구든지 하는 리액트: 초심자를 위한 리액트 핵심 강좌</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/react/react-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;오랜만에 Velopert 님의 인프런 강의(&lt;strong&gt;리액트&lt;/strong&gt;)를 보고 정리하는 차원에서 리액트 관련 포스팅을
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="React" scheme="http://jason0853.github.io/categories/Front-end/React/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="React" scheme="http://jason0853.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Config create-react-app with sass and spritesmith</title>
    <link href="http://jason0853.github.io/2018/05/28/Config-create-react-app-with-sass-and-spritesmith/"/>
    <id>http://jason0853.github.io/2018/05/28/Config-create-react-app-with-sass-and-spritesmith/</id>
    <published>2018-05-28T05:58:57.000Z</published>
    <updated>2019-05-18T06:10:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/react/react-logo.png" alt=""></p><p>이번에 웹앱 프로젝트를 진행하면서 css 모듈화와 이미지 자동화를 위해 <strong>Sass</strong>와 <strong>Spritesmith</strong>를 페이스북에서 제공하는 <strong>create-react-app</strong>과 어떻게 사용하는지 알아보겠습니다.</p><h3 id="Create-react-app"><a href="#Create-react-app" class="headerlink" title="# Create-react-app"></a># Create-react-app</h3><p>우선 기본 셋팅을 하기 위해 폴더를 생성하고 생성된 폴더 안에서 <strong>create-react-app</strong>을 사용하여 리액트 프로젝트를 생성해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir create-react-app-for-sass-and-spritesmith &amp;&amp; <span class="built_in">cd</span> create-react-app-for-sass-and-spritesmith</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn eject</span></span><br></pre></td></tr></table></figure><ul><li><code>yarn eject</code>를 실행하면 Are you sure you want to eject? This action is permanent. 이런 메세지가 나옵니다. <code>y</code>를 입력해주시면 webpack을 customize 할 수 있게 config 폴더가 생성됩니다.</li></ul><h3 id="How-to-config-sass-with-webpack"><a href="#How-to-config-sass-with-webpack" class="headerlink" title="# How to config sass with webpack"></a># How to config sass with webpack</h3><p><strong>Sass</strong> 환경을 위해 필요한 package들을 <code>yarn</code>을 통해 설치해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add node-sass sass-loader</span></span><br></pre></td></tr></table></figure><ul><li>node-sass: sass 파일들을 css파일로 변환해주는 역할을 합니다.</li><li>sass-loader: webpack에서 sass 파일들을 읽어오는 역할을 합니다</li></ul><figure class="highlight js"><figcaption><span>paths.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...(중략)...</span></span><br><span class="line">  styles: resloveApp(<span class="string">'src/styles'</span>)  <span class="comment">//  styles 폴더 경로 지정</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>scss 모듈들을 쉽게 불러올 수 있도록 styles 폴더를 루트로 지정하였습니다. 이 모듈을 불러와서 webpack에서 설정하겠습니다.</li></ul><figure class="highlight js"><figcaption><span>webpack.config.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  <span class="comment">// ...(중략)...</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// sass-loader 추가</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'sass-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// path 추가</span></span><br><span class="line">        includePaths: [paths.styles]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>기존 webpack.config.dev.js 안에 있는 css 설정을 바로 밑에 복사한 다음 <code>/&#92;.scss$/</code>로 확장자를 바꿔줍니다.<ul><li><code>style-loader</code>: style 태그를 injecting 시킴으로써 DOM에 css를 추가해줍니다.</li><li><code>css-loader</code>: <code>@import</code>와 <code>url()</code>을 <code>import</code>와 <code>require()</code>와 같이 해석하여 해결해줍니다.</li><li>우리가 입력한 css 코드에 prefix(<code>-webkit-</code><code>-mos-</code><code>-ms-</code>)를 자동으로 붙여줍니다.</li></ul></li><li>개발하면서 css 디버깅을 위해 options에 <code>sourceMap: true</code> 코드를 추가해줍니다.</li><li>맨 마지막으로 <code>sass-loader</code> 설정을 해주고 options에 scss 모듈들을 쉽게 import 할 수 있도록 경로 설정을 추가해줍니다.</li></ul><figure class="highlight js"><figcaption><span>webpack.config.prod.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  <span class="comment">// ...(중략)...</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  loader: ExtractTextPlugin.extract(</span><br><span class="line">    <span class="built_in">Object</span>.assign(</span><br><span class="line">      &#123;</span><br><span class="line">        fallback: &#123;</span><br><span class="line">          loader: <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">          options: &#123;</span><br><span class="line">            hmr: <span class="literal">false</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">1</span>,</span><br><span class="line">              minimize: <span class="literal">true</span>,</span><br><span class="line">              sourceMap: shouldUseSourceMap,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">              <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">              ident: <span class="string">'postcss'</span>,</span><br><span class="line">              plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">                autoprefixer(&#123;</span><br><span class="line">                  browsers: [</span><br><span class="line">                    <span class="string">'&gt;1%'</span>,</span><br><span class="line">                    <span class="string">'last 4 versions'</span>,</span><br><span class="line">                    <span class="string">'Firefox ESR'</span>,</span><br><span class="line">                    <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">                  ],</span><br><span class="line">                  flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">                &#125;),</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'sass-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// path 추가</span></span><br><span class="line">              includePaths: [paths.styles]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      extractTextPluginOptions</span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">// Note: this won't work without `new ExtractTextPlugin()` in `plugins`.</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>webpack.config.prod.js 파일 또한 기존 css 설정을 바로 밑에 복사한 다음 <code>/&#92;.scss$/</code>로 확장자를 바꿔줍니다.</li></ul><h3 id="How-to-config-spritesmith-with-webpack"><a href="#How-to-config-spritesmith-with-webpack" class="headerlink" title="# How to config spritesmith with webpack"></a># How to config spritesmith with webpack</h3><p>이번엔 이미지 자동화를 위해 spritesmith를 webpack에 적용해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add webpack-spritesmith</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>env.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line"><span class="comment">// spritesmith plugin 설정</span></span><br><span class="line">  <span class="keyword">const</span> configSprite = &#123;</span><br><span class="line">    src: &#123;</span><br><span class="line">      cwd: path.resolve(__dirname, <span class="string">'../src/assets/ico'</span>),</span><br><span class="line">      glob: <span class="string">'*.png'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    target: &#123;</span><br><span class="line">      image: path.resolve(__dirname, <span class="string">'../src/assets/sprites/sprite.png'</span>),</span><br><span class="line">      css: path.resolve(__dirname, <span class="string">'../src/styles/sprite.scss'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    retina: <span class="string">'@2x'</span>,</span><br><span class="line">    apiOptions: &#123;</span><br><span class="line">      cssImageRef: <span class="string">"~sprite.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; raw, stringified, configSprite &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getClientEnvironment;</span><br></pre></td></tr></table></figure><ul><li>config 폴더 안에 있는 env.js에서 미리 spritesmith 관련 환경설정을 미리 해줍니다.</li><li><code>retina: ‘@2x’</code> 옵션은 sprite@2x.png를 생성시켜줍니다.</li></ul><figure class="highlight js"><figcaption><span>webpack.config.dev.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line"><span class="keyword">const</span> SpritesmithPlugin = <span class="built_in">require</span>(<span class="string">'webpack-spritesmith'</span>);</span><br><span class="line">  <span class="comment">// ...(중략)...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// This allows you to set a fallback for where Webpack should look for modules.</span></span><br><span class="line">    <span class="comment">// We placed these paths second because we want `node_modules` to "win"</span></span><br><span class="line">    <span class="comment">// if there are any conflicts. This matches Node resolution mechanism.</span></span><br><span class="line">    <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/253</span></span><br><span class="line">    <span class="comment">// sprites 폴더 경로 추가</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, paths.appNodeModules, <span class="string">'assets/sprites'</span>].concat(</span><br><span class="line">      <span class="comment">// It is guaranteed to exist because we tweak it in `env.js`</span></span><br><span class="line">      process.env.NODE_PATH.split(path.delimiter).filter(<span class="built_in">Boolean</span>)</span><br><span class="line">    ),</span><br><span class="line">  <span class="comment">// ...(중략)...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...(중략)...</span></span><br><span class="line">    <span class="comment">// SpritesmithPlugin 추가</span></span><br><span class="line">    <span class="keyword">new</span> SpritesmithPlugin(env.configSprite)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><ul><li><code>yarn</code>으로 설치한 <code>webpack-spritesmith</code> 플러그인을 불러와 webpack에 설정을 해줍니다.</li><li><code>‘assets/sprites’</code>를 modeuls 속성 배열안에 추가해준 이유는 모듈(~sprite.png) 형태로 불러오는것을 해결해주기 위함입니다.</li></ul><figure class="highlight js"><figcaption><span>webpack.config.prod.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...(중략)...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// This allows you to set a fallback for where Webpack should look for modules.</span></span><br><span class="line">    <span class="comment">// We placed these paths second because we want `node_modules` to "win"</span></span><br><span class="line">    <span class="comment">// if there are any conflicts. This matches Node resolution mechanism.</span></span><br><span class="line">    <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/253</span></span><br><span class="line">    <span class="comment">// sprites 폴더 경로 추가</span></span><br><span class="line">    modules: [<span class="string">'node_modules'</span>, paths.appNodeModules, <span class="string">'assets/sprites'</span>].concat(</span><br><span class="line">      <span class="comment">// It is guaranteed to exist because we tweak it in `env.js`</span></span><br><span class="line">      process.env.NODE_PATH.split(path.delimiter).filter(<span class="built_in">Boolean</span>)</span><br><span class="line">    ),</span><br></pre></td></tr></table></figure><ul><li>production 레벨에서는 경로만 추가해줍니다.</li><li>build를 해주기 전에는 <code>yarn start</code>를 한 뒤에 <code>yarn build</code>를 해주시기 바랍니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>처음 환경 셋팅을 할 때 webpack-spritesmith 때문에 삽질을 많이 했었는데 이번에 이렇게 정리하고 나니 다음에는 copy and paste를 하면 될 것 같습니다. 전체 내용 코드는 아래 github repository에서 확인하실 수 있습니다.</p><div style="text-align:center">  <div class="github-card" data-user="jason0853" data-repo="create-react-app-custom" data-width="100%" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div></div><script src="/github-card-lib/githubcard.js"></script><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://velopert.com/3447" target="_blank" rel="noopener">리액트 컴포넌트 스타일링</a><br><a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/react/react-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번에 웹앱 프로젝트를 진행하면서 css 모듈화와 이미지 자동화를 위해 &lt;strong&gt;Sass&lt;/strong&gt;와 &lt;strong&gt;
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="React" scheme="http://jason0853.github.io/categories/Front-end/React/"/>
    
    
      <category term="React" scheme="http://jason0853.github.io/tags/React/"/>
    
      <category term="Sass" scheme="http://jason0853.github.io/tags/Sass/"/>
    
      <category term="Spritesmith" scheme="http://jason0853.github.io/tags/Spritesmith/"/>
    
  </entry>
  
  <entry>
    <title>React and Redux with Typescript</title>
    <link href="http://jason0853.github.io/2018/05/12/React-and-Redux-with-Typescript/"/>
    <id>http://jason0853.github.io/2018/05/12/React-and-Redux-with-Typescript/</id>
    <published>2018-05-12T08:06:26.000Z</published>
    <updated>2019-05-18T06:10:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/react/react-logo.png" alt=""></p><p>최근 회사에서 <strong>리액트&amp;리덕스</strong>를 사용하여 웹앱 프로젝트를 진행하고 있는 와중에 <strong>타입스크립트</strong>도 개인적으로 공부하고 있었습니다. 그래서 ‘이 두 가지를 같이 사용하면 어떨까?’라는 생각을 하게 되었습니다. 다음 프로젝트를 위해 미리 포스팅을 작성하면서 공부해보겠습니다.</p><h3 id="Create-react-app-with-typescript"><a href="#Create-react-app-with-typescript" class="headerlink" title="# Create react app with typescript"></a># Create react app with typescript</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> create-react-app react-redux-ts --scripts-version=react-scripts-ts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> react-redux-typescript-tutorial</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><ul><li>Microsoft에서 미리 react와 typescript 초기 설정에 대한 CLI를 제공해줍니다. <strong>react-redux-typescript-tutorial</strong> 폴더로 이동하고 <code>yarn start</code>를 실행해보겠습니다.<br>주의) 혹시 브라우저에서 <code>Duplicate identifier ‘URL’</code> 에러가 나는 경우 @types/node 버전을 바꿔주시길 바랍니다. -&gt; <code>yarn add –dev @types/node@9.6.7</code></li></ul><h3 id="Configure"><a href="#Configure" class="headerlink" title="# Configure"></a># Configure</h3><p>우선 첫 component를 만들기에 앞서 src 폴더 안에 있는 logo.svg, App.css, App.test.tsx를 삭제하겠습니다.<br>그리고 나서 App.tsx 파일 내용은 아래와 같이 바꿔주시길 바랍니다.</p><script src="//gist.github.com/542d2e22bec63c4f892ce0964fb400fc.js"></script><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//(중략...)</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "NODE_PATH=src react-scripts-ts start",</span><br><span class="line">    "build": "NODE_PATH=src react-scripts-ts build",</span><br><span class="line">    "test": "react-scripts-ts test --env=jsdom",</span><br><span class="line">    "eject": "react-scripts-ts eject"</span><br><span class="line">  &#125;,</span><br><span class="line">//(중략...)</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./src"</span>,</span><br><span class="line">//(중략...)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>tslint.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"tslint-react"</span>, <span class="string">"tslint-config-prettier"</span>],</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"config/**/*.js"</span>,</span><br><span class="line">      <span class="string">"node_modules/**/*.ts"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">      <span class="attr">"jsx-no-lambda"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>절대 경로로 파일을 불러올 수 있도록 <strong>package.json</strong>, <strong>tsconfig.json</strong>의 파일을 위와 같이 수정해줍니다.<br>예) <code>import Person from components/Person</code></li><li>tslint.json 파일 안에 <code>“tslint:recommended”</code>가 들어가 있다면 삭제하고 <code>“jsx-no-lambda” : false</code>로 설정을 추가해줍니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn start</span></span><br></pre></td></tr></table></figure><ul><li>브라우저에 App component가 잘 렌더링됩니다. </li></ul><h3 id="Create-first-component"><a href="#Create-first-component" class="headerlink" title="# Create first component"></a># Create first component</h3><p><strong>Typescript</strong>를 이용하여 component를 생성할 때는 <strong>.tsx</strong> 확장자를 사용합니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 폴더 구조</span><br><span class="line">src</span><br><span class="line">  - components</span><br><span class="line">    Person.tsx</span><br><span class="line">  App.tsx</span><br><span class="line">  index.css</span><br><span class="line">  index.tsx</span><br><span class="line">  registerServiceWorker.ts</span><br></pre></td></tr></table></figure><script src="//gist.github.com/98433a5acb9d72249e342a9defa8771f.js"></script><ul><li>기존 자바스크립트에서는 prop-types를 이용하여 타입 checking을 해왔었습니다. 하지만 타입스크립트에서는 <code>interface</code> 및 <code>type</code>를 이용하여 props 및 state에 타입을 지정해줍니다.</li><li>type 에러가 날 경우 예전과 달리 런타임 전에 error를 확인하실 수 있습니다.</li><li>함수형 Component로 작성할 경우 <code>React.SFC</code>를 사용하여 타입을 지정해주는 것이 권장사항입니다.</li></ul><h3 id="Smart-component-amp-Dumb-component"><a href="#Smart-component-amp-Dumb-component" class="headerlink" title="# Smart component &amp; Dumb component"></a># Smart component &amp; Dumb component</h3><p>이번엔 <strong>smart component(state 및 life cycle api가 필요한 컴포넌트)</strong>와 <strong>dumb component(style 및 단순 props 전달받을 컴포넌트)</strong>로 나누어 연습해보겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 폴더 구조</span><br><span class="line">src</span><br><span class="line">  - components</span><br><span class="line">    Counter.tsx</span><br><span class="line">    Person.tsx</span><br><span class="line">  - containers</span><br><span class="line">    CounterContainer.tsx</span><br><span class="line">  App.tsx</span><br><span class="line">  index.css</span><br><span class="line">  index.tsx</span><br><span class="line">  registerServiceWorker.ts</span><br></pre></td></tr></table></figure><script src="//gist.github.com/cfd3e945d261859457d82c7116d5a051.js"></script><ul><li>CounterContainer(Smart Component)의 <code>state</code> 값과 함수들을 Counter(Dumb Component)의 props로 전달해줍니다.</li><li><code>interface</code>가 없는 경우엔 Generic 타입을 빈 객체로 지정해줍니다.<br>예) &lt;{}, State&gt;</li></ul><h3 id="Create-Todo-List"><a href="#Create-Todo-List" class="headerlink" title="# Create Todo List"></a># Create Todo List</h3><p>Todo List를 한번 만들어 보면서 컴포넌트 최적화 및 여러가지 기능들을 구현해보겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 폴더 구조</span><br><span class="line">src</span><br><span class="line">  - components</span><br><span class="line">    Counter.tsx</span><br><span class="line">    Person.tsx</span><br><span class="line">    TodoForm.tsx</span><br><span class="line">    TodoItem.tsx</span><br><span class="line">    TodoList.tsx</span><br><span class="line">  - containers</span><br><span class="line">    CounterContainer.tsx</span><br><span class="line">    TodoContainer.tsx</span><br><span class="line">  App.tsx</span><br><span class="line">  index.css</span><br><span class="line">  index.tsx</span><br><span class="line">  registerServiceWorker.ts</span><br></pre></td></tr></table></figure><script src="//gist.github.com/2ea857eeb604ad7bd9d67832453b6b9b.js"></script><ul><li><code>TodoList</code>, <code>TodoItem</code>을 함수형 컴퍼넌트로 만들지 않은 이유는 <strong>LifeCycle API</strong>인 <code>shouldComponentUpdate(nextProps, nextState)</code>를 이용하여 컴퍼넌트 최적화를 해야하기 때문입니다. 만약 최적화 작업이 이루어지지 않는다면 Virtual Dom에서 필요없는 resource가 렌더링됩니다. 특히 <code>TodoItem</code>의 갯수가 기하급수적으로 늘어난다면 필요없는 자원들로 인해 결국 렌더링 속도가 느려질 것입니다.</li></ul><h3 id="Combine-Redux-with-Typescript"><a href="#Combine-Redux-with-Typescript" class="headerlink" title="# Combine Redux with Typescript"></a># Combine Redux with Typescript</h3><p>이제 <strong>Redux</strong>와 <strong>Typescript</strong>를 함께 사용해보겠습니다. 시작하기에 앞서 필요한 패키지들을 설치해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add redux react-redux redux-actions immer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add @types/redux @types/react-redux @types/redux-actions</span></span><br></pre></td></tr></table></figure><ul><li><strong>immer</strong> 패키지 안에 type definitions이 이미 내장되어 있기 때문에 타입 패키지를 따로 설치하지 않아도 됩니다.</li></ul><p>수정된 파일과 추가된 파일이 너무 많아 아래 깃헙 소스에서 코드를 검토해주세요.ㅎㅎ<br>Combine Redux with Typescript 커밋 로그를 수정된 소스와 추가된 파일 소스를 바로 확인하실 수 있습니다.</p><div style="text-align:center">  <div class="github-card" data-user="jason0853" data-repo="react-redux-typescript-tutorial" data-width="100%" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div></div><script src="/github-card-lib/githubcard.js"></script><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 폴더 구조</span><br><span class="line">src</span><br><span class="line">  - store</span><br><span class="line">    - models</span><br><span class="line">      counter.ts</span><br><span class="line">      index.ts</span><br><span class="line">      todo.ts</span><br><span class="line">    - modules</span><br><span class="line">      counter.ts</span><br><span class="line">      index.ts</span><br><span class="line">      todo.ts</span><br><span class="line">    actionCreators.ts</span><br><span class="line">    configure.ts</span><br><span class="line">    index.ts</span><br></pre></td></tr></table></figure><ul><li>기존 src 폴더 안에 store 폴더를 추가한 다음 redux 관련 코드는 <strong>modules</strong> 폴더에 분류하고 state, action payload, action creator의 type definition을 <strong>models</strong> 폴더에 분류합니다.</li><li><code>state</code> 및 <code>props</code>는 <code>type</code>(type alias)를 사용하고 actionCreator methods들은 <code>interface</code>로 타입지정을 합니다.<br><strong><em>주의) 액션 함수들을 <code>interface</code>로 타입 지정을 할 경우 <code>[key: string]: any;</code>를 하지 않으면 <code>index signature is missing in type ~~</code>에러가 나기 때문에 추가해줍니다.</em></strong></li><li>actionCreators.ts 파일을 따로 만들어 액션 파일들을 따로 관리해주는 이유는 smart component에서 <code>connect</code>함수에 연결시켜서 props로 가져오는 번거러움을 덜어주기 위함입니다.<br>예) <code>this.props.CounterActions.increase();</code>가 아닌 <code>CounterActions.increase();</code></li><li>Reducers 코드를 작성할 때 action.payload 타입이 <code>undefined</code> 에러가 나는 경우가 있습니다. 그 이유는 <code>Action</code> 인터페이스가 payload가 없어도 될 수 있도록 설계되어 있기 때문에 예외처리를 따로 해주어야합니다.<ul><li><code>action.payload!</code> - payload가 항상 있을 경우</li><li><code>action.payload &amp;&amp; do something</code> - aciton.payload가 참일 경우에만</li></ul></li></ul><p><img src="../../../../images/react/react-redux-typescript-tutorial.png" alt=""></p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>리액트, 리덕스, 타입스크립트를 함께 사용하며 느낀 점은 타입 지정 때문에 기존보다 코딩 시간이 오래 걸리는 것 같이 느끼지만 적응하다보니 좀 더 풍부한 장점을 누릴 수 있었습니다. 특히 vscode랑 같이 쓰다 보니 자동완성 및 마우스 hover를 할 경우 어떤 타입인지 노출시켜줍니다. 그렇기 때문에 파일을 이동하며 확인해 볼 필요가 없어집니다. 또한 저희가 할 수 있는 사소한 실수를 에디터에서 바로 알려줍니다. 저같은 경우는 앞으로 타입스크립트를 도입하여 작업하는 환경이 점점 늘어날 것 같습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://velopert.com/3595" target="_blank" rel="noopener">TypeScript with React + Redux/Immutable.js 빠르게 배우기</a><br><a href="https://github.com/mweststrate/immer" target="_blank" rel="noopener">Immer</a><br><a href="https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c" target="_blank" rel="noopener">Interface vs Type alias in TypeScript 2.7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/react/react-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근 회사에서 &lt;strong&gt;리액트&amp;amp;리덕스&lt;/strong&gt;를 사용하여 웹앱 프로젝트를 진행하고 있는 와중에 &lt;strong
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="React" scheme="http://jason0853.github.io/categories/Front-end/React/"/>
    
    
      <category term="Typescript" scheme="http://jason0853.github.io/tags/Typescript/"/>
    
      <category term="React" scheme="http://jason0853.github.io/tags/React/"/>
    
      <category term="Redux" scheme="http://jason0853.github.io/tags/Redux/"/>
    
      <category term="Immer" scheme="http://jason0853.github.io/tags/Immer/"/>
    
  </entry>
  
  <entry>
    <title>Docker Basic</title>
    <link href="http://jason0853.github.io/2018/04/23/Docker-Basic/"/>
    <id>http://jason0853.github.io/2018/04/23/Docker-Basic/</id>
    <published>2018-04-23T04:36:13.000Z</published>
    <updated>2019-05-18T06:10:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/docker/docker-logo.png" alt=""></p><p>요즘 인프라에 대해 관심이 생기면서 자연스럽게 <strong>Docker</strong>에 대해 관심을 가지게 되었습니다. Docker에 대해 1도 몰랐던 개발자들에게 도움이 되고자 포스팅을 한 번 해보겠습니다. 이번 포스팅은 <strong>Docker</strong>의 기본 개념과 자주 쓰는 명령어에 대해 간락히 살펴보겠습니다.</p><h3 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h3><p><strong>Docker</strong>에 대해 검색을 해보니 Virtual Machine(VM Ware / Virtual Box)과 유사한 기능을 가진 것처럼 보입니다. 기존의 Virtual Machine 같은 경우 Host OS가 깔리고 그 위에 VM Ware나 Virtual Box를 설치한 이후에 다양한 종류의 OS(Linux나 Windows)를 설치합니다. 즉, 하드웨어를 가상화 한 것이라고 보면 됩니다. 상당히 무겁고 운영환경에서 쓰기에 이슈가 많습니다. 그와 반대로 <strong>도커</strong>는 Host OS가 깔리고 그 위에 Docker Engine이 실행되며 Container 위에서 Linux 기반의 OS만 수행이 가능합니다. 여기서 중요하게 봐야할 부분은 <strong>컨터이너</strong>라는 격리된 공간에서 프로세스가 동작하는 기술입니다. 에를 들어 여러 개의 컨테이너를 동시에 띄워도 독립적으로 실행되기 때문에 아주 가볍고 빠르게 동작합니다. 또한 컨테이너를 설치하는 시간은 기존의 가상머신(VM Ware나 Virtual Box) 위에 OS를 설치하는 것과 비교할 수 없을 정도로 빠릅니다.</p><h3 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h3><p>우선 Docker를 설치해보겠습니다. 이 <a href="https://www.docker.com/community-edition#/download" target="_blank" rel="noopener">사이트</a>에서 각자 자신의 운영체제에 맞게 설치하면 되겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker --version</span></span><br></pre></td></tr></table></figure><ul><li>설치하신 이후 docker가 잘 깔렸는지 확인하기 위해 version 체크를 해보겠습니다.</li></ul><h3 id="Docker-Command-Line"><a href="#Docker-Command-Line" class="headerlink" title="Docker Command Line"></a>Docker Command Line</h3><p>개인적으로 CLI를 선호하기 때문에 자주 쓰는 명령어를 요약해보겠습니다. CLI보다 GUI Tool을 선호하시는 분은 <a href="https://kitematic.com/" target="_blank" rel="noopener">kitematic</a>을 추천드립니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><ul><li>docker와 관련된 command line 정보를 보여줍니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull <span class="string">'image name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure><ul><li><code>pull</code> 명령어는 docker 이미지 내려 받기. Tag에 버전을 따로 적어주지 않으면 최신버전(latest)을 내려받게 됩니다.<br>ex) <code>docker pull ubuntu</code> / <code>docker pull ubuntu:14.04</code></li><li><code>docker images</code>는 내려받는 docker 이미지 리스트들을 노출시켜줍니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm <span class="string">'container id or name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi <span class="string">'image id'</span></span></span><br></pre></td></tr></table></figure><ul><li>docker의 container와 image를 삭제시킵니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name <span class="string">'new name'</span> <span class="string">'image name:tag'</span> /bin/bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name <span class="string">'new name'</span> -p <span class="string">'host port:container port'</span> <span class="string">'image name:tag'</span></span></span><br></pre></td></tr></table></figure><ul><li>새로운 컨테이너를 만들면서 /bin/bash를 실행시키는 명령어입니다.</li><li>옵션 <code>i</code>는 interactive의 약자로 사용자가 입출력을 할 수 있는 상태를 만들어줍니다.</li><li>옵션 <code>t</code>는 가상 터미널 환경을 emulate 해주는 기능입니다.</li><li><code>name</code> 옵션을 주지 않아도 random으로 name이 부여됩니다.</li><li>/bin/bash 안으로 들어오고 나서 다시 container 밖으로 나오려면 <code>exit</code>를 입력해주시면 됩니다. 이때 container는 종료됩니다. 종료하지 않고 빠져나오고 싶은 경우는 <code>Ctrl + p + q</code> 단축키를 사용합니다.</li><li><code>d</code> 옵션 같은 경우는 ubuntu 같은 os 이미지 말고 nginx 같은 어플리케이션을 이미지로 내려받을 경우 입출력이 따로 필요없기 때문에 백그라운드 형태에서 실행시켜주는 역할을 합니다.<br>예) nginx pull로 받고 나서 실행 시킬 경우 : <code>docker run -d –name webserver -p 8000:80 nginx:latest</code> 명령어 실행시킨 후 브라우저에서 localhost:8000으로 접속하면 nginx 서버에 접속하는걸 확인하실 수 있습니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure><ul><li><code>docker ps</code>는 현재 실행되고 있는 container 리스트를 보여줍니다.</li><li><code>a</code>옵션은 모든 container 리스트(종료된 리스트 포함)까지 보여줍니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start <span class="string">'container id or name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop <span class="string">'container id or name'</span></span></span><br></pre></td></tr></table></figure><ul><li>docker container의 실행시켜주고 종료시키는 명령어입니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach <span class="string">'container id or name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it <span class="string">'container id or name'</span> /bin/bash</span></span><br></pre></td></tr></table></figure><ul><li>실행되고 있는 container에서 /bin/bash 안으로 들어가서 입출력을 할 수 있게 해줍니다.</li><li><code>attach</code> 같은 경우는 명령어 이후 enter키를 한 번 쳐주셔야지 /bin/bash 안으로 접근할 수 있습니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> <span class="string">'container id or name'</span> <span class="built_in">echo</span> <span class="string">'hello docker'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> <span class="string">'contianer id or name'</span> touch /jason.txt</span></span><br></pre></td></tr></table></figure><ul><li><code>exec</code>는 실행되고 있는 컨테이너 외부에서 컨테이너 내부를 contorl 할 수 있는 명령어입니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>Docker의 기본 개념과 빈번히 사용되는 명령어에 대해서 알아보았습니다. 다음 시간에는 Docker를 활용한 CI(Continuous Integration) 환경 구축을 연습해보도록 하겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://bcho.tistory.com/805" target="_blank" rel="noopener">Docker 소개</a><br><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html" target="_blank" rel="noopener">초보를 위한 도커 안내서 - 도커란 무엇인가?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/docker/docker-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;요즘 인프라에 대해 관심이 생기면서 자연스럽게 &lt;strong&gt;Docker&lt;/strong&gt;에 대해 관심을 가지게 되었습니다. 
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Docker" scheme="http://jason0853.github.io/categories/Ops/Docker/"/>
    
    
      <category term="Docker" scheme="http://jason0853.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (추석 트래픽)</title>
    <link href="http://jason0853.github.io/2018/03/24/2018-kakao-blind-recruitment-round-1-7/"/>
    <id>http://jason0853.github.io/2018/03/24/2018-kakao-blind-recruitment-round-1-7/</id>
    <published>2018-03-24T14:01:32.000Z</published>
    <updated>2019-05-18T06:10:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>드디어 카카오톡 신입 공채 1차 코딩 테스트 마지막 문제입니다. 마지막 문제라 어려울거라 예상했는데 역시나 어려웠습니다.ㅠㅠ</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-7-01.png" alt=""></p><p>문제를 살짝 읽어보니 로그 데이터를 분석한 후 초당 최대처리량을 구하는 문제입니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-7-02.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-7-03.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-7-04.png" alt=""></p><ul><li>처리시간은 시작시간과 끝시간을 포함해야합니다.</li><li>요청 갯수를 카운트 할때 요청 갯수가 변경되는 순간은 1초(1000ms)입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  [<span class="string">"2016-09-15 01:00:04.001 2.0s"</span>, <span class="string">"2016-09-15 01:00:07.000 2s"</span>],</span><br><span class="line">  [<span class="string">"2016-09-15 01:00:04.002 2.0s"</span>, <span class="string">"2016-09-15 01:00:07.000 2s"</span>],</span><br><span class="line">  [<span class="string">"2016-09-15 20:59:57.421 0.351s"</span>, <span class="string">"2016-09-15 20:59:58.233 1.181s"</span>, <span class="string">"2016-09-15 20:59:58.299 0.8s"</span>, <span class="string">"2016-09-15 20:59:58.688 1.041s"</span>, <span class="string">"2016-09-15 20:59:59.591 1.412s"</span>, <span class="string">"2016-09-15 21:00:00.464 1.466s"</span>, <span class="string">"2016-09-15 21:00:00.741 1.581s"</span>, <span class="string">"2016-09-15 21:00:00.748 2.31s"</span>, <span class="string">"2016-09-15 21:00:00.966 0.381s"</span>, <span class="string">"2016-09-15 21:00:02.066 2.62s"</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chuseokTraffic</span>(<span class="params">logs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numArr = logs.map(<span class="function"><span class="params">log</span> =&gt;</span> log.match(<span class="regexp">/\d+/g</span>).slice(<span class="number">3</span>, <span class="number">9</span>).map(<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">Number</span>(c)));  <span class="comment">// 숫자 정규식 / 날짜 제외 slice / number 타입으로 변경</span></span><br><span class="line">  <span class="keyword">const</span> time = [], lengths = [];</span><br><span class="line">  <span class="keyword">let</span> endTime, interval, <span class="built_in">window</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> numArr) &#123;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">elem, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (idx) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: endTime = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * elem; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: endTime += <span class="number">1000</span> * <span class="number">60</span> * elem; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: endTime += <span class="number">1000</span> * elem; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: endTime += elem; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: interval = elem * <span class="number">1000</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: interval = elem ? interval + elem : interval; <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    time.push(&#123; <span class="attr">startTime</span>: endTime - interval + <span class="number">1</span>, endTime &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  time.forEach(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span> = <span class="built_in">window</span>.filter(<span class="function"><span class="params">end</span> =&gt;</span> end &gt; t.startTime - <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">window</span>.push(t.endTime);</span><br><span class="line">    lengths.push(<span class="built_in">window</span>.length);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...lengths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> test) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chuseokTraffic(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 1, 2, 7</span></span><br></pre></td></tr></table></figure><ul><li>로그데이터를 처리하는데 필요한 부분만 필터링을 해서 <code>numArr</code> 변수에 저장합니다.</li><li>1s = 1,000ms, 1m = 60s x 1,000ms, 1h = 60m x 60,000ms를 참고하여 시간을 계산해줍니다.</li><li>변수 <code>endTime</code>은 ms로 변환한 값(시간, 분, 초, 밀리세컨드)을 더한 값이며, <code>startTime</code>은 끝시간(<code>endTime</code>)에서 처리시간(<code>interval</code>)을 빼주고 시작시간을 포함해야하므로 1을 더해줍니다.<br>예) 끝시간이 3607000ms이고 처리시간이 2000ms이면 시작시간은 3605001이 되어야합니다.</li><li>끝시간이 다음 로그 시작되는 구간에서 1000ms를 뺀 값보다 클 경우 <code>window</code>(초당 최대 처리량이 되는 구간) 배열에 담아 각 구간의 처리량을 <code>lengths</code>배열에 저장해둡니다.</li><li><code>forEach</code> 구문이 끝나면 <code>Math.max()</code> 함수를 이용하여 <code>lengths</code> 배열안에 최대값을 구합니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-7-05.png" alt=""></p><p>확실히 정답률이 낮았습니다. 저 역시도 다른 문제들과 달리 해결 방법이 쉽게 떠오르지 않았습니다. 문제해설을 보시면 <strong>o(n log n)</strong>으로 풀 수 있는 방법도 있다고 합니다. 다음에 기회가 된다면 이런 방식으로 한 번 고민해서 풀어봐야겠습니다.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>드디어 마지막 문제까지 다 풀어보았습니다. 블로그에 정리해놨으니 나중에 코드를 리뷰할 때 한결 빠르게 코드를 읽어나갈 수 있을것 같습니다.ㅋㅋ 다음에 시간이 허락된다면 풀었던 문제들을 좀 더 개선된 알고리즘으로 해결해서 공유해볼 수 있도록 노력해보겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;드디어 카카오톡 신입 공채 1차 코딩 테스트 마지막 문제입니다. 마지막 문제라 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (프렌즈4블록)</title>
    <link href="http://jason0853.github.io/2018/03/24/2018-kakao-blind-recruitment-round-1-6/"/>
    <id>http://jason0853.github.io/2018/03/24/2018-kakao-blind-recruitment-round-1-6/</id>
    <published>2018-03-24T13:55:37.000Z</published>
    <updated>2019-05-18T06:10:55.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>이번 알고리즘 문제는 그림을 보면 풀고 싶게 만드는 게임 관련 문제입니다. 문제를 한번 살펴보겠습니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-01.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-02.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-03.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-04.png" alt=""><br><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-05.png" alt=""></p><p>문제를 읽어보면 같은 모양의 2X2형태 블록이 붙어 있을 경우 지워지면서 위에 남아 있는 블록들은 빈공간으로 이동합니다. 카카오톡에서 이런 게임들은 다들 한번씩은 해보셨을거라 다른 문제보다 한번에 이해가 되셨을겁니다.ㅎㅎ</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-06.png" alt=""></p><p>문제를 풀기 전에 주의해야할 점은 아래와 같은 경우를 고려하시면 되겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 삭제 전</span><br><span class="line">CCBDE</span><br><span class="line">AAADE</span><br><span class="line">AAABF</span><br><span class="line">CCBBF</span><br><span class="line"></span><br><span class="line">// 삭제 후</span><br><span class="line">CCBDE</span><br><span class="line">   DE</span><br><span class="line">   BF</span><br><span class="line">CCBBF</span><br></pre></td></tr></table></figure><p>위의 경우처럼 2X3 형태로 A문자열이 연결되어 있을 경우 2X2 형태로 바로 삭제하면 안된다는 점입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  &#123; <span class="attr">m</span>: <span class="number">4</span>, <span class="attr">n</span>: <span class="number">5</span>, <span class="attr">board</span>: [<span class="string">"CCBDE"</span>, <span class="string">"AAADE"</span>, <span class="string">"AAABF"</span>, <span class="string">"CCBBF"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">m</span>: <span class="number">6</span>, <span class="attr">n</span>: <span class="number">6</span>, <span class="attr">board</span>: [<span class="string">"TTTANT"</span>, <span class="string">"RRFACC"</span>, <span class="string">"RRRFCC"</span>, <span class="string">"TRRRAA"</span>, <span class="string">"TTMMMF"</span>, <span class="string">"TMMTTJ"</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">friends4Block</span>(<span class="params">m, n, board</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> removedBlockNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 각 문자열 배열 만들기</span></span><br><span class="line">  board.forEach(<span class="function">(<span class="params">char</span>) =&gt;</span> arr = [...arr, char.split(<span class="string">''</span>)]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    prevBlockNum = removedBlockNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arrIdx = [];  <span class="comment">// 좌표 배열</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 같은 블록 좌표 구하기</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i][j] === arr[i][j+<span class="number">1</span>] </span><br><span class="line">          &amp;&amp; arr[i][j] === arr[i+<span class="number">1</span>][j] </span><br><span class="line">          &amp;&amp; arr[i][j] === arr[i+<span class="number">1</span>][j+<span class="number">1</span>]) &#123;</span><br><span class="line">          </span><br><span class="line">          arrIdx = [...arrIdx, [i, j], [i, j+<span class="number">1</span>], [i+<span class="number">1</span>, j], [i+<span class="number">1</span>, j+<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filteredStrings = <span class="keyword">new</span> <span class="built_in">Set</span>(arrIdx.map(<span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(arr)));  <span class="comment">// string 변경 및 필터링</span></span><br><span class="line">    <span class="keyword">const</span> toArrIdx = [...filteredStrings].map(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">JSON</span>.parse(str));  <span class="comment">// 배열로 다시 변경</span></span><br><span class="line"></span><br><span class="line">    toArrIdx.filter(<span class="function"><span class="params">x</span> =&gt;</span> arr[x[<span class="number">0</span>]][x[<span class="number">1</span>]] = <span class="string">' '</span>);  <span class="comment">// 블록 삭제</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;  <span class="comment">// 위에 블록이 밑으로 이동 안했을 경우 대비해서 다시 한번씩 row만큼 스캔</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (arr[i][j] === <span class="string">' '</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!arr[i<span class="number">-1</span>]) <span class="keyword">continue</span>;  <span class="comment">// 에러 예외 처리</span></span><br><span class="line">            temp = arr[i<span class="number">-1</span>][j];</span><br><span class="line">            arr[i<span class="number">-1</span>][j] = arr[i][j];</span><br><span class="line">            arr[i][j] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removedBlockNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    arr.forEach(<span class="function"><span class="params">x</span> =&gt;</span> removedBlockNum += x.filter(<span class="function"><span class="params">y</span> =&gt;</span> y === <span class="string">' '</span>).length);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">while</span> (prevBlockNum != removedBlockNum); <span class="comment">// 이전 삭제 블록 갯수랑 다르면 계속 반복</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> removedBlockNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> test) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(friends4Block(obj.m, obj.n, obj.board));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 14, 15</span></span><br></pre></td></tr></table></figure><ul><li>문자 하나씩을 비교해야하기 때문에 <code>board</code> 배열에 담긴 문자열을 쪼개줍니다. </li><li>열(<code>m</code>)과 행(<code>m</code>)만큼 이중 반복문으로 돌리면서 문자열을 체크합니다. </li><li>2X2 형태의 문자열이 연결되어 있을 경우 배열 좌표를 <code>arrIdx</code> 배열에 담습니다. 좌표 배열을 담을때 중복되는 좌표값은 <code>new Set()</code>을 사용하여 걸러내고 다시 배열로 변경합니다.</li><li><code>filter</code> 메서드를 이용하여 각 좌표값의 블록을 삭제(공백 처리)해줍니다.</li><li>3중 loop 같은 경우 위에 남아 있는 블록을 아래로 이동시키기 위함입니다. (성능상 좋은 방식은 아닌것 같습니다. ㅠㅠ)</li><li><code>arr</code> 배열에서 공백처리된 부분의 갯수(length)값을 구하고 이전 블록 삭제 갯수랑 현재 블록 삭제된 갯수가 다르면 계속 처음부터 로직을 반복합니다.</li><li>반복을 다 마치면 현재 블록 삭제갯수를 리턴시킵니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-6-07.png" alt=""></p><p>문제해설을 보니 이번 블라인드 채용 문제 중에 코드라인이 가장 길었던 것 같습니다. 아무래도 체크해야할 부분이 많아서 그랬던 것 같습니다. 생각해보니 지금까지 프로그래밍을 하면서 이렇게 많이 반복문을 많이 사용한 적은 처음인 것 같습니다.ㅋㅋ</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>결과적으로 문제는 해결했지만 포스팅에도 중간에 언급했듯이 성능상 안 좋은 코드들이 조금씩 보입니다. 다음 기회에 시간이 된다면 다른 방식으로 풀어서 성능을 개선시켜보겠습니다. 혹시 좀 더 나은 알고리즘으로 푸신 분들은 댓글로 공유부탁드립니다. </p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 알고리즘 문제는 그림을 보면 풀고 싶게 만드는 게임 관련 문제입니다. 문제
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (뉴스 클러스터링)</title>
    <link href="http://jason0853.github.io/2018/03/11/2018-kakao-blind-recruitment-round-1-5/"/>
    <id>http://jason0853.github.io/2018/03/11/2018-kakao-blind-recruitment-round-1-5/</id>
    <published>2018-03-11T07:57:09.000Z</published>
    <updated>2019-05-18T06:10:55.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>이번 알고리즘은 중으로 표시되어있지만 생각보다 쉬웠습니다. 긴말 할 필요없이 바로 문제 요약해보고 풀이해보겠습니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-5-01.png" alt=""></p><p>문제를 읽어보니 <strong>자카드 유사도</strong>란 낯선 단어가 보입니다. 그런데 겁먹을 필요가 없습니다. 문제안에서 <strong>자카드 유사도</strong>에 대해 상세히 설명해줍니다. <strong>두집합 사이에 교집합 크기를  합집합 크기로 나눈값</strong>이라고 정의합니다. 이해가 바로 되니 길게 설명할 필요가 없습니다.ㅋㅋ 이번엔 입출력 형식을 한번 살펴보고 정리해보겠습니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-5-02.png" alt=""></p><ul><li>2개의 문자열이 들어옵니다.</li><li>각 문자열을 두 글자씩 잘라내야합니다.</li><li>두 글자씩 끊을 때 공백, 특수문자, 숫자가 함께 있는 경우는 버립니다.</li><li>대소문자 구별은 동일한 걸로 취급합니다.</li><li>자카드 유사도 = 교집합 / 합집합 * 65536</li><li>교집합이 공집합일 경우 1로 간주합니다.</li><li>소수점 이하는 버리고 정수부분만 출력합니다.<br><strong><em>다중집합일경우 교집합은 min(최소값) 합집합은 max(최대값)으로 계산을 해야합니다. 제가 초반에 이 부분을 고려하지 않고 코드를 작성하다 실수를 했었습니다.ㅠㅠ</em></strong></li></ul><p>이제 코드를 공개해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  &#123; <span class="attr">str1</span>: <span class="string">'FRANCE'</span>, <span class="attr">str2</span>: <span class="string">'french'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">str1</span>: <span class="string">'handshake'</span>, <span class="attr">str2</span>: <span class="string">'shake hands'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">str1</span>: <span class="string">'aa1+aa2'</span>, <span class="attr">str2</span>: <span class="string">'AAAA12'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">str1</span>: <span class="string">'E=M*C^2'</span>, <span class="attr">str2</span>: <span class="string">'e=m*c^2'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newsClustering</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="built_in">arguments</span>[i].toLowerCase();</span><br><span class="line">    arr[i] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, len = str.length - <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> reg = str.substr(j, <span class="number">2</span>).match(<span class="regexp">/^[a-z]*$/</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg) arr[i].push(reg.input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([...arr[<span class="number">0</span>], ...arr[<span class="number">1</span>]]);</span><br><span class="line">  <span class="keyword">let</span> size1, size2, intsecNum = <span class="number">0</span>, unionNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  set.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    size1 = arr[<span class="number">0</span>].filter(<span class="function"><span class="params">char</span> =&gt;</span> char === val).length;</span><br><span class="line">    size2 = arr[<span class="number">1</span>].filter(<span class="function"><span class="params">char</span> =&gt;</span> char === val).length;</span><br><span class="line"></span><br><span class="line">    intsecNum += <span class="built_in">Math</span>.min(size1, size2);</span><br><span class="line">    unionNum += <span class="built_in">Math</span>.max(size1, size2);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!intsecNum) intsecNum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (!unionNum) unionNum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(intsecNum / unionNum * <span class="number">65536</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> test) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newsClustering(obj.str1, obj.str2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 16384, 65536, 43690, 65536</span></span><br></pre></td></tr></table></figure><ul><li>파라미터로 전달받은 각 문자열(<code>str1</code>,<code>str2</code>)을 <code>toLowerCase()</code> 메서드를 이용하여 소문자로 만들어주었습니다. 대문자로 만들어도 무방합니다.</li><li>변수 <code>reg</code>는 문자열을 두 글자씩 끊은 다음 정규식으로 영문자열일 경우 배열 형태로 반환되어 저장됩니다. 만약 영문자 이외의 문자나 공백이 함께 오는 경우는 null값으로 반환되어 저장됩니다. 그렇다면 배열 값이 존재할 때만 빈 배열에 push하면 됩니다.</li><li><code>Set</code> 객체를 이용하여 두 배열에서 존재하고 있는 유일한 값만을 저장합니다. <code>set</code>이란 변수에 담긴 배열을 이용하여 두 배열(arr[0], arr[1]) 안에 일치하는 문자열 갯수를 구합니다.</li><li><code>size1</code>, <code>size2</code> 두 변수를 <code>Math.min()</code>, <code>Math.min()</code>를 이용하여 최소값(교집합 갯수), 최대값(합집합 갯수)을 구합니다.</li><li>교집합과 합집합이 0일 경우도 있으므로 예외처리(1) 값을 처리해줍니다.</li><li><code>Math.floor(intSecNum / unionNum * 65536)</code> 위 문제에서 말한대로 자카드 유사도 식에 65536 곱해서 소숫점 이하는 버리고 정수부분만 반환시킵니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-5-03.png" alt=""></p><p>문제 해설을 보니 정답률이 <a href="https://jason0853.github.io/2018/03/02/2018-kakao-blind-recruitment-round-1-4/">지난번 셔틀버스</a>보다 높게 나왔습니다. 문제랑 입출력 예제만 꼼꼼히 잘 살펴본다면 실수하지 않고 다들 푸실 수 있을 것 같습니다.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>개인적으로 지금까지 풀어본 알고리즘 문제들 중에 가장 쉬웠던 것 같습니다. 풀기 전에 머릿속으로 ‘이런 방식으로 짜야지’ 생각하고 풀었는데 술술 잘 풀려서 기분이 좋았습니다. 사실 초반에 빨리 푸는 바람에 실수했었습니다.ㅠㅠ 그럼 다음 포스팅에서 찾아뵙겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 알고리즘은 중으로 표시되어있지만 생각보다 쉬웠습니다. 긴말 할 필요없이 바
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (셔틀버스)</title>
    <link href="http://jason0853.github.io/2018/03/02/2018-kakao-blind-recruitment-round-1-4/"/>
    <id>http://jason0853.github.io/2018/03/02/2018-kakao-blind-recruitment-round-1-4/</id>
    <published>2018-03-02T14:15:27.000Z</published>
    <updated>2019-05-18T06:10:55.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>이번 문제는 정말 어려웠었습니다. 난이도도 중으로 표시되어 있어서 쫄았었는데 진짜 푸는데 몇 일 걸렸습니다. 예상컨대 다음 문제부터는 못 풀지도 모르겠습니다. ㅠㅠ 하이튼 같이 한번 제가 푼 방식을 공유해보겠습니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-4-01.png" alt=""></p><ul><li>셔틀의 시작 시간 - 09:00</li><li>n회 t분 간격으로 도착하므로 예를 들어 5회 10분 간격이면 09:00, 09:10, 09:20, 09:30, 09:40 이렇게 셔틀버스가 운영됩니다.</li><li>셔틀버스 도착 시간에 딱 맞춰서 줄을 서도 빈자리가 있으면 탈 수 있습니다.</li><li>같은 시각에 온 사람일경우 주인공 콘은 맨 뒤에 서야합니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-4-02.png" alt=""></p><p>입출력 형식 및 예제를 다 살펴보았습니다. 제일 늦은 시각을 출력해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">1</span>, <span class="attr">t</span>: <span class="number">1</span>, <span class="attr">m</span>: <span class="number">5</span>, <span class="attr">timetable</span>: [<span class="string">"08:00"</span>, <span class="string">"08:01"</span>, <span class="string">"08:02"</span>, <span class="string">"08:03"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">2</span>, <span class="attr">t</span>: <span class="number">10</span>, <span class="attr">m</span>: <span class="number">2</span>, <span class="attr">timetable</span>: [<span class="string">"09:10"</span>, <span class="string">"09:09"</span>, <span class="string">"08:00"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">2</span>, <span class="attr">t</span>: <span class="number">1</span>, <span class="attr">m</span>: <span class="number">2</span>, <span class="attr">timetable</span>: [<span class="string">"09:00"</span>, <span class="string">"09:00"</span>, <span class="string">"09:00"</span>, <span class="string">"09:00"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">1</span>, <span class="attr">t</span>: <span class="number">1</span>, <span class="attr">m</span>: <span class="number">5</span>, <span class="attr">timetable</span>: [<span class="string">"00:01"</span>, <span class="string">"00:01"</span>, <span class="string">"00:01"</span>, <span class="string">"00:01"</span>, <span class="string">"00:01"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">1</span>, <span class="attr">t</span>: <span class="number">1</span>, <span class="attr">m</span>: <span class="number">1</span>, <span class="attr">timetable</span>: [<span class="string">"23:59"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">n</span>: <span class="number">10</span>, <span class="attr">t</span>: <span class="number">60</span>, <span class="attr">m</span>: <span class="number">45</span>, <span class="attr">timetable</span>: [<span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>, <span class="string">"23:59"</span>] &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuttleBus</span>(<span class="params">n, t, m, timetable</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">calculateTime</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hour = <span class="built_in">Number</span>(str.substr(<span class="number">0</span>, <span class="number">2</span>)) * <span class="number">60</span>,</span><br><span class="line">          min = <span class="built_in">Number</span>(str.substr(<span class="number">3</span>, <span class="number">2</span>)) * <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> hour + min;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hh = <span class="built_in">String</span>(<span class="built_in">Math</span>.floor(num / <span class="number">60</span>)).padStart(<span class="number">2</span>, <span class="string">'0'</span>),</span><br><span class="line">          mm = <span class="built_in">String</span>(num % <span class="number">60</span>).padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startTime = calculateTime(<span class="string">'09:00'</span>),</span><br><span class="line">        lastTime = startTime + t * (n - <span class="number">1</span>),</span><br><span class="line">        crewTime = timetable.map(calculateTime).filter(<span class="function"><span class="params">time</span> =&gt;</span> time &lt;= lastTime).sort();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> shuttleTime = startTime + i * t,</span><br><span class="line">          crewNum = crewTime.filter(<span class="function"><span class="params">time</span> =&gt;</span> time &lt;= shuttleTime).length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i === n - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (crewNum &lt; m) <span class="keyword">return</span> formatTime(lastTime);</span><br><span class="line">      <span class="keyword">return</span> formatTime(crewTime[m - <span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (crewNum &gt; m) &#123;</span><br><span class="line">        crewTime.splice(<span class="number">0</span>, m);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        crewTime.splice(<span class="number">0</span>, crewNum);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> test) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(shuttleBus(obj.n, obj.t, obj.m, obj.timetable));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 09:00, 09:09, 08:59, 00:00, 09:00, 18:00</span></span><br></pre></td></tr></table></figure><ul><li><code>calculateTime</code> 메서드는 string 타입으로 된 시간 표시를 number 타입으로 계산하는 함수입니다.<br><strong><em>예) 시간 X 60 / 분 X 1 - 09:01 - 541</em></strong></li><li><code>formatTime</code> 메서드는 <code>calculateTime</code>와 반대로 다시 string 타입으로 시간 표시를 해주는 함수힙니다. 마지막 값을 리턴해줄때 사용합니다.</li><li><code>startTime + t * (n - 1)</code> 계산값은 버스의 마지막 시간을 구하게 됩니다.<br><strong><em>예) 셔틀버스 시작 시간 + 시간 간격 X (셔틀버스 횟수 - 1)</em></strong></li><li><code>timetable.map(calculateTime)</code> 배열 값을 전부 time 계산값으로 바꿔줍니다.</li><li><code>timetable.filter(time =&gt; time &lt;= lastTime)</code> 셔틀버스의 마지막 시간보다 늦게 오면 탈 수 없으므로 필터링 해줍니다.</li><li><code>timetable.sort()</code> 배열을 오름차순으로 정렬해줍니다.</li><li><code>n</code> 버스 횟수만큼 for loop를 돌려서 각각의 <code>shuttleTime</code>(셔틀버스 도착시간)과 <code>crewNum</code>(셔틀버스 도착시간 전에 온 크루들 몇 명)를 구합니다.</li><li><code>splice</code> 함수를 통해 셔틀버스 도착시간 전에 온 크루들이 버스 사이즈보다 더 많을 경우 다 타지 못하므로 사이즈(<code>m</code>)만큼 배열을 잘라줍니다.</li><li><code>if (i === n - 1)</code> 조건문을 통해 마지막 loop를 돌때 crewTime의 남아있는 배열 시간값을 알수 있습니다. 이 값들을 통해 버스를 탈 수 있는 가장 늦은 시각을 구할 수 있습니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-4-03.png" alt=""></p><p>문제 해설을 읽어보니 역시나 어려운 문제였던것 같습니다. 정답률이 26.79%네요. 이번 문제 같은 경우 마지막 버스 시간까지 꼼꼼히 고려하지 않으면 실수할 경우가 많았을 것 같습니다.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>이 문제 같은 경우는 같이 스터디하는 친구가 힌트를 주면서 풀었기 때문에 그나마 접근해서 풀 수 있었습니다. 결국 풀다보니 코드도 동일해져버렸지만 이런 문제를 풀면서 다양하게 접근하는 방식을 익힐 수 있어서 좋은 시간이었던 것 같습니다. 몇 일 걸렸지만 ㅠㅠ 혹시 이거 말고 다른 로직으로 푸신분 공유해주시면 정말 감사하겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 문제는 정말 어려웠었습니다. 난이도도 중으로 표시되어 있어서 쫄았었는데 진
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Typescript Features</title>
    <link href="http://jason0853.github.io/2018/03/01/Typescript-Features/"/>
    <id>http://jason0853.github.io/2018/03/01/Typescript-Features/</id>
    <published>2018-02-28T19:34:04.000Z</published>
    <updated>2019-05-18T06:10:55.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/typescript/typescript-logo.png" alt=""></p><p>지난 <a href="https://jason0853.github.io/2018/02/27/Typescript-Basic-and-Configuration/">포스팅</a>에 타입스크립트를 하기 위한 환경을 구축했었습니다. 그럼 본격적으로 <strong>타입스크립트</strong>의 특징에 대해서 하나하나 실습해보겠습니다.</p><h3 id="Checking-Type"><a href="#Checking-Type" class="headerlink" title="# Checking Type"></a># Checking Type</h3><p>자바스크립트는 동적타입 언어이기 때문에 기존 타입에 다른 타입을 대입해도 에러가 나지 않았습니다. 하지만 타입스크립트는 다른 언어(Java)처럼 타입을 시스템을 도입하여 Type 선언을 엄격하게 합니다.<br>만약 string 타입 변수에 number를 넣으면 아래처럼 에러가 발생합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1: <span class="built_in">string</span> = <span class="string">'Test'</span>;</span><br><span class="line">test1 = <span class="number">3</span>;  <span class="comment">// [ts] Type '3' is not assignable to type 'string'.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test2;</span><br><span class="line">test2 = <span class="string">'Jaesung'</span>;</span><br><span class="line">test2 = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test3 = <span class="string">'Jaesung Lee'</span>;</span><br><span class="line">test3 = <span class="literal">false</span>;  <span class="comment">// [ts] Type 'false' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><ul><li><code>let test1: string</code> 코드를 보면 콜론(:) 뒤에 string이라고 타입을 명시해주었습니다. 즉, string 타입 이외에 다른 타입의 값이 할당되면은 에러를 발생하게 됩니다.</li><li><code>test2</code> 변수는 선언할 때 값을 할당하지 않았습니다. 이런 경우는 <code>let test2: any;</code> 타입으로 명시해준거랑 같습니다.</li><li><code>test3</code> 변수는 타입이 선언되지 않았지만 초기값이 string 타입으로 값이 할당되었기 때문에 할당 과정에서 타입이 string으로 결정됩니다. 그렇기 때문에 다른 타입의 값이 재할당되면 에러가 발생하게 됩니다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string, number, boolean</span></span><br><span class="line"><span class="keyword">let</span> pName: <span class="built_in">string</span> = <span class="string">'Jason'</span>;</span><br><span class="line"><span class="keyword">let</span> pAge: <span class="built_in">number</span> = <span class="number">33</span>;</span><br><span class="line"><span class="keyword">let</span> isJob: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> profile: <span class="built_in">string</span> = <span class="string">`Name: <span class="subst">$&#123;pName&#125;</span>, Age: <span class="subst">$&#123;pAge&#125;</span>, Job: <span class="subst">$&#123;isJob&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">let</span> val: <span class="built_in">any</span> = <span class="string">'test'</span>;</span><br><span class="line">val = <span class="number">33</span>;</span><br><span class="line">val = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="keyword">const</span> person: object = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array</span></span><br><span class="line"><span class="keyword">let</span> info: <span class="built_in">any</span>[] = [<span class="string">'Jason Lee'</span>, <span class="number">33</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> friends: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">'Jason'</span>, <span class="string">'Jane'</span>, <span class="string">'Lilly'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tuple</span></span><br><span class="line"><span class="keyword">let</span> player: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">player = [<span class="string">'Kobe'</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enum</span></span><br><span class="line"><span class="keyword">enum</span> Player &#123;Kobe = <span class="number">8</span>, Tmac = <span class="number">1</span>, Kyrie = <span class="number">11</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> p: Player = Player.Kyrie;</span><br><span class="line"><span class="keyword">let</span> playerName: <span class="built_in">string</span> = Player[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p);  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(playerName);  <span class="comment">// Kobe</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>any</code> 타입은 어떠한 타입의 값도 들어올 수 있습니다. 하지만 실무에서는 any 타입을 지양하는 것을 권고합니다.</li><li>array 타입을 지정할 때는 두 가지 방식이 있습니다. 두번째 방식을 generic array type이라고 합니다.</li><li><strong>Tuple</strong>이란 array type의 고정된 수의 유형이면서 동일한 타입의 배열이 아닐 때 사용할 수 있습니다.</li><li><strong>Enum</strong>이란 C#과 같은 언어에서처럼 열거형은 숫자값 집합에 더 친숙한 이름을 지정하는 방법입니다.</li><li>함수에 <code>void</code>가 선언되어 있을 경우 리턴값이 없어야합니다.</li></ul><h3 id="function-type"><a href="#function-type" class="headerlink" title="# function type"></a># function type</h3><p>함수에 타입을 명시함으로써 argument나 return 타입이 어떤 형태인지 쉽게 알 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Calculate'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCal: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">myCal = sum;</span><br><span class="line"><span class="built_in">console</span>.log(myCal(<span class="number">1</span>, <span class="number">2</span>));  <span class="comment">// 3</span></span><br><span class="line">myCal = show;  <span class="comment">// [ts] Type '() =&gt; string' is not assignable to type '(x: number, y: number) =&gt; number'. Type 'string' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><ul><li><code>myCal = show</code> 코드에서 에러가 난 이유는 서로 타입이 다르기 때문입니다. <code>myCal</code>은 인자와 return 타입이 함께 지정되어 있으며 <code>show</code>는 return을 string으로 받는 함수 타입입니다.</li></ul><h3 id="Object-type"><a href="#Object-type" class="headerlink" title="# Object type"></a># Object type</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span>; job: <span class="built_in">boolean</span>; &#125;;</span><br><span class="line">info = &#123; name: <span class="string">'Jaesung'</span>, age: <span class="number">34</span>, job: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// custom type</span></span><br><span class="line"><span class="keyword">type</span> profile = &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span>; job: <span class="built_in">boolean</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: profile = &#123; name: <span class="string">'Jaesung'</span>, age: <span class="number">34</span>, job: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> p2: profile = &#123; name: <span class="string">'Jimmy'</span>, age: <span class="number">19</span>, job: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> p3: profile = &#123; name: <span class="string">'Dennis'</span>, age: <span class="number">22</span>, job: <span class="literal">true</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li><code>p1</code>, <code>p2</code>, <code>p3</code>는 동일한 타입이지만 변수 <code>info</code>처럼 개별적으로 타입을 선언해주는 것은 좀 별로인것 같습니다. 이때 <code>type</code>과 함께 <strong>custom type</strong>을 명시해줍니다.</li></ul><h3 id="Union-Type"><a href="#Union-Type" class="headerlink" title="# Union Type"></a># Union Type</h3><p>하나 이상의 어떤 타입을 지정하는 방식을 <strong>Union Type</strong>이라고 합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> players: <span class="built_in">string</span>[] | <span class="built_in">number</span>[] | <span class="built_in">boolean</span>[] = [<span class="string">'Kobe Bryant'</span>, <span class="string">'Tracy Mcgrady'</span>];</span><br><span class="line"></span><br><span class="line">players = [<span class="number">8</span>, <span class="number">1</span>];</span><br><span class="line">players = [<span class="literal">true</span>, <span class="literal">false</span>];</span><br></pre></td></tr></table></figure><ul><li><code>any</code>타입을 쓰면 간단하지만 <strong>Union Type</strong>(<code>string[] | number[] | boolean[]</code>)을 쓰는 것을 권장합니다.</li></ul><h3 id="class"><a href="#class" class="headerlink" title="# class"></a># class</h3><p>Typesciprt의 클래스는 ES6의 class와 사용법이 다르니 한번 자세히 다뤄보겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> readonly name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">protected</span> job: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">static</span> hobby: <span class="built_in">string</span>[] = [<span class="string">'Basketball'</span>, <span class="string">'Swimming'</span>, <span class="string">'Jit Jitsu'</span>];</span><br><span class="line">  <span class="keyword">static</span> word: <span class="built_in">string</span> = <span class="string">'Hi, How are you?'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, job: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(newAge: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = newAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAge(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move(text: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> greet(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.word;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, job: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age, job );</span><br><span class="line">    <span class="keyword">super</span>.move(<span class="string">'I can walk.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  change(isJob: <span class="built_in">boolean</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.job = isJob;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isJob(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.job;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1:Person = <span class="keyword">new</span> Person(<span class="string">'Jason'</span>, <span class="number">33</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> p2:Student = <span class="keyword">new</span> Student(<span class="string">'Jane'</span>, <span class="number">18</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1.name = 'Jason Lee'  // [ts] Cannot assign to 'name' because it is a constant or a read-only property.</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name);  <span class="comment">// Jason</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p2.setAge(19);</span></span><br><span class="line"><span class="comment">// console.log(p2.getAge());  // 19</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p2.isJob());  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.greet());  <span class="comment">// Hi, How are you?</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.hobby);  <span class="comment">// ["Basketball", "Swimming", "Jit Jitsu"]</span></span><br></pre></td></tr></table></figure><ul><li><code>public</code> - 클래스, 서브클래스, 인스턴스 어디에서도 접근 가능.</li><li><code>private</code> - 클래스 내부 이외의 서브클래스나 인스턴스에서는 접근 불가능.</li><li><code>protected</code> - 클래스 내부와 서브클래스 내부에서만 접근 가능. 인스턴스 접근 불가능.</li><li><code>readonly</code> - 읽기 전용 propery.</li><li><code>static</code> - 클래스의 인스턴스로 호출하지 않고 접근할 수 있음. 인스턴스 접근 불가능.<br><strong><em><code>static greet()</code>메서드 안에 있는 this는 인스턴스가 아닌 클래스 <code>person</code>을 가르킵니다.</em></strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Car &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> brand(): <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  move(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test car'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Genesis <span class="keyword">extends</span> Car &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'Genesis'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  brand() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hyundai'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> Genesis();</span><br><span class="line"></span><br><span class="line">g.move();  <span class="comment">// test car</span></span><br><span class="line"><span class="built_in">console</span>.log(g.name);  <span class="comment">// Genesis</span></span><br><span class="line"><span class="built_in">console</span>.log(g.brand());  <span class="comment">// Hyundai</span></span><br></pre></td></tr></table></figure><ul><li><strong>추상클래스(abstract class)</strong>는 오직 상속만 가능하며 추상 메소드는 상속하는 클래스에 반드시 구현이 되어 있어야합니다.</li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="# interface"></a># interface</h3><p><strong>인터페이스(interface)</strong>는 custom type과 거의 비슷하지만 몇 가지 효율적인 면이 있습니다. 클래스와 상속에서 유용하게 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Human &#123;</span><br><span class="line">  readonly id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  alive: <span class="built_in">boolean</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  say: <span class="function">(<span class="params">arg: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person: Human;</span><br><span class="line"></span><br><span class="line">person = &#123;id: <span class="number">111</span>, name: <span class="string">'Jason'</span>, alive: <span class="literal">true</span>, say: <span class="function">(<span class="params">lang: <span class="built_in">string</span></span>) =&gt;</span> lang&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">info: Human</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(info.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName(person);  <span class="comment">// Jason</span></span><br><span class="line"><span class="built_in">console</span>.log(person.say(<span class="string">'Korean'</span>));  <span class="comment">// Korean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">implements</span> Human &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> id: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> alive: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  say(lang: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lang</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Student(<span class="number">123</span>, <span class="string">'18'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.say(<span class="string">'English'</span>));  <span class="comment">// English</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Gender &#123;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Foreigner <span class="keyword">extends</span> Human, Gender &#123;</span><br><span class="line">  nation: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> engineer: Foreigner = &#123;id: <span class="number">111</span>, name: <span class="string">'Jason'</span>, alive: <span class="literal">true</span>, say: <span class="function">(<span class="params">lang: <span class="built_in">string</span></span>) =&gt;</span> lang, nation: <span class="string">'Korea'</span>, gender: <span class="string">'M'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 빈 걕체 초기화</span></span><br><span class="line"><span class="comment">// let engineer = &lt;Foreigner&gt;&#123;&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>?</code> <strong>Optional Property</strong>입니다. 인터페이스에 기술한 프로퍼티와 메소드가 반드시 구현되어야 합니다. 하지만 선택적 프로퍼티(?)를 붙이면 생략해도 무방합니다.</li><li>클래스랑 같이 쓸때 메소드 내부를 반드시 구현해야합니다.</li><li>여러 인터페이스 상속이 가능합니다.</li><li><code>engineer</code> 변수를 초기화하지 않고 비어있는 객체로 설정하고 싶다면 <strong>Generic</strong> 문법을 사용하여 빈 객체로 둔 상태에서 property를 추가해줄수 있습니다.</li></ul><h3 id="type-alias-VS-interface"><a href="#type-alias-VS-interface" class="headerlink" title="# type alias VS interface"></a># type alias VS interface</h3><p>앞에 살짝 다뤘던 type alias와 interface까지 공부해보았습니다. 그런데 여기서 궁금한 점이 하나 생겼습니다. <strong>interface</strong>와 <strong>type alias</strong>의 차이는 무엇일까요?</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Info <span class="keyword">extends</span> Profile &#123;</span><br><span class="line">  isJob: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Info = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  isJob: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>인터페이스는 같은 인터페이스에 property를 추가해줄 수 있고 <code>extends</code> 키워드를 통하여 확장할 수 있습니다.</li><li><code>implements</code> 키워드를 통하여 인터페이스를 구현할 수도 있습니다.</li></ul><p>반면에 type alias는 어떨까요?</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Job = <span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Work = &#123;</span><br><span class="line">  job: Job</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info = (Profile &amp; Work) | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Info = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  job: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>type alias</strong>는 인터페이스와 달리 <strong>Union Type</strong>을 지정할 수도 있고 다른 type alias랑 결합해서 다른 이름을 지정할 수 있습니다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Work &#123;</span><br><span class="line">  job: <span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info = (Profile &amp; Work) | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Info = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  job: <span class="string">'true'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>위와 같이 <strong>interface</strong>와 <strong>type alias</strong>를 혼용해서 사용할 수도 있습니다.</li></ul><h3 id="Generic"><a href="#Generic" class="headerlink" title="# Generic"></a># Generic</h3><p><strong>제네릭(Generic)</strong>은 위에서 배운 타입 선언과 달리 미리 선언을 명시하지 않고 생성한 뒤에 타입이 정해집니다. 또한 타입도 여러가지 타입이 올 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function test1(arg: number): number &#123;</span></span><br><span class="line"><span class="comment">//   return arg;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function test2(arg: string): string &#123;</span></span><br><span class="line"><span class="comment">//   return arg;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function test3(arg: boolean): boolean &#123;</span></span><br><span class="line"><span class="comment">//   return arg;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = test&lt;<span class="built_in">string</span>&gt;(<span class="string">'Generic'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(answer);  <span class="comment">// Generic</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAnswer: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = test;</span><br><span class="line"><span class="comment">// let myAnswer2: &#123; &lt;T&gt;(arg: T): T &#125; = test;  // 변수 myAnswer와 같음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAnswer(<span class="string">'Generic'</span>));  <span class="comment">// Generic</span></span><br></pre></td></tr></table></figure><ul><li>주석친 부분을 보시면 같은 함수인데 타입만 다를뿐 안에 구현되는 내용은 같습니다. 이럴때 좀 더 간편하게 쓸 수 있는 것이 <strong>Generic</strong>입니다. 선언 시점에 타입을 명시하는 것이 아니라 생성 시점, 즉 <code>test</code>함수가 실행되면서 타입이 string으로 정해집니다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T, U&gt; &#123;</span><br><span class="line">  name: T;</span><br><span class="line">  age: U;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: T, age: U</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAge(): U &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;(<span class="string">'Jaesung'</span>, <span class="number">33</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>Generic Class</strong> 같은 경우 기본 구조는 위와 같습니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>지금까지 간략하게 <strong>타입스크립트</strong>의 특징에 대해서 알아보았습니다. 자바스크립트만 하다가 타입을 명시하면서 코딩을 하니까 몬가 어색했지만 프로젝트를 진행할 때 좀 더 안정적으로 개발할 수 있을것 같다는 생각이 들었습니다. 특히 인터페이스나 타입이 지정되어 있기 때문에 새로운 팀원이 투입될 시 빠르게 코드 분석을 할 수 있을 것 같습니다. 타입스크립트를 계속 관심만 가지고 지켜보다가 비로소 이번 포스팅으로 인해 첫걸음을 뗀 것 같습니다. 이번에 다루지 못하고 지나간 부분들은 다음 포스팅때 좀 더 공부해서 공유해보도록 하겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.typescriptlang.org" target="_blank" rel="noopener">타입스크립트 공식 홈페이지</a><br><a href="http://poiemaweb.com/typescript-typing" target="_blank" rel="noopener">타입 선언과 정적 타이핑</a><br><a href="https://stackoverflow.com/questions/36782896/in-typescript-what-is-the-difference-between-type-and-interface" target="_blank" rel="noopener">type과 interface 차이는 무엇인가?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/typescript/typescript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 &lt;a href=&quot;https://jason0853.github.io/2018/02/27/Typescript
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Typescript" scheme="http://jason0853.github.io/categories/Front-end/Typescript/"/>
    
    
      <category term="Typescript" scheme="http://jason0853.github.io/tags/Typescript/"/>
    
      <category term="tsconfig" scheme="http://jason0853.github.io/tags/tsconfig/"/>
    
  </entry>
  
  <entry>
    <title>Typescript Basic and Configuration</title>
    <link href="http://jason0853.github.io/2018/02/27/Typescript-Basic-and-Configuration/"/>
    <id>http://jason0853.github.io/2018/02/27/Typescript-Basic-and-Configuration/</id>
    <published>2018-02-27T04:25:40.000Z</published>
    <updated>2019-05-18T06:10:55.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/typescript/typescript-logo.png" alt=""></p><p><strong>타입스크립트</strong>는 Microsoft에서 만든 정적 타입언어이며, 자바스크립트의 한계를 보완해줄 수 있습니다. 개인적으로 가장 큰 장점은 자바스크립트(ES5, ES6)와 타입스크립트 문법을 공존해서 쓸 수 있는 것이라고 생각합니다. 한 마디로 <strong>Typescript는 Javascript의 super set</strong>이라고 정의하는데 자바스크립트 개발자들에게는 반가운 소식일 것 같습니다. 이번 포스팅은 타입스크립트를 시작하는 방법에 대해서 알아보겠습니다.</p><h3 id="Getting-started-with-Typescript"><a href="#Getting-started-with-Typescript" class="headerlink" title="# Getting started with Typescript"></a># Getting started with Typescript</h3><p>우선 typescript를 install하고 제대로 설치되었는지 확인해보겠습니다. 그리고 Microsoft사에서 제공하는 에디터인 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>를 설치해서 실습을 진행하겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g typesciprt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tsc -v</span></span><br></pre></td></tr></table></figure><p>간단하게 test.ts 파일을 하나 만들어서 js 파일로 compile 해보겠습니다.</p><figure class="highlight ts"><figcaption><span>test.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">lang: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lang;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="string">'Typescript'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tsc test.ts</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> lang;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="string">'Typescript'</span>));</span><br></pre></td></tr></table></figure><p>node로 test.js를 실행시켜보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node test.js</span></span><br><span class="line">Typescript</span><br></pre></td></tr></table></figure><p>‘Typesciprt’가 log에 출력됩니다. 간단히 ts 파일을 만들고 실행까지 시켜보았습니다. 이번에는 <strong>tsc</strong> 몇가지 명령어에 대해서 정리해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tsc *.ts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tsc <span class="string">'filename'</span> --watch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tsc <span class="string">'filename'</span> -t <span class="string">'target'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tsc --init</span></span><br></pre></td></tr></table></figure><ul><li>asterisk(*)을 사용하여 모든 ts 파일을 js 파일로 complie합니다.</li><li><code>watch</code> 옵션은 해당 파일을 계속 감지하여 js 파일로 변경시켜줍니다.</li><li><code>t</code> 옵션은 target의 약자로 타입스크립트의 기본 compile system은 ES3로 target이 정해져 있습니다. 만약 ES5로 바꾸고 싶다면 아래와 같이 명령어를 실행시켜주세요.<br>예) <code>tsc test.ts -t ES5</code></li><li>tsconfig.json 파일을 생성시켜줍니다. 그 이후 <code>tsc</code> 명령어를 치면 모든 타입스크립트 파일이 자바스크립트 파일로 compile 됩니다.</li></ul><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="# tsconfig.json"></a># tsconfig.json</h3><p>타입스크립트로 프로젝트를 시작할 때 <strong>tsconfig.json</strong>에 다양한 옵션을 정의하여 환경설정을 기술할 수 있습니다. 어떤 옵션들이 있는지 한 번 살펴보겠습니다.</p><script src="//gist.github.com/3b63b6888123e3bd3b0bcfd64049cb48.js"></script><ul><li><code>baseUrl</code> : 기본 url 설정</li><li><code>rootDir</code> : root directory 설정 (outDir 옵션과 함께 사용)</li><li><code>outDir</code> : 결과 파일을 저장할 directory 지정</li><li><code>target</code> : target 변경</li><li><code>module</code> : module mode 지정</li><li><code>removeComments</code> : 주석 삭제</li><li><code>strict</code> : 모두 엄격하게 type checking<br>(noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization)</li><li><code>sourceMap</code> : map 파일 생성 (vscode에서 디버깅할려면 true로 변경해야함)</li><li><code>pretty</code> : error message colorfully 출력</li><li><code>noEmitOnError</code> : compile 대상 리스트</li><li><code>include</code> : error 발생시 결과 파일 저장 안함</li><li><code>exclude</code> : compile 대상 제외 리스트</li><li><code>lib</code> : 라이브러리 목록</li></ul><p>이 옵션 이외에도 다양한 옵션들이 많이 있습니다. <a href="http://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">여기</a>를 참고해주세요.</p><h3 id="Debug"><a href="#Debug" class="headerlink" title="# Debug"></a># Debug</h3><p>vscode에서 디버깅하는 방법을 한번 알아보겠습니다. 아래처럼 폴더 구조와 파일을 만들어주고 코드를 넣어주세요. <code>tsconfig.json</code>파일에는 위 코드를 copy/paste 해주세요.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">  |-test.ts</span><br><span class="line">tsconfig.json</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debug</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(debug(<span class="string">'Debugging'</span>));</span><br></pre></td></tr></table></figure><p><img src="../../../../images/typescript/typescript-basic-and-configuration-01.png" alt=""></p><p>CMD + Shift + B 를 누르면 tsc: watch - tsconfig.json을 선택합니다. 그럼 코드가 바뀔때마다 compile 작업을 하면서 dist 폴더에 test.js 파일과 test.js.map 파일이 생성됩니다.<br>이제 breakpoint를 걸고 디버깅을 해보겠습니다.</p><p><img src="../../../../images/typescript/typescript-basic-and-configuration-02.png" alt=""></p><p>코드 넘버 라인 왼쪽에 breakpoint(중단점)을 걸고 vscode 왼쪽 네번째 디버깅 버튼을 선택합니다. 왼쪽 사이드바가 바뀌면 디버그 버튼 클릭하고 Node.js를 선택합니다.</p><p><img src="../../../../images/typescript/typescript-basic-and-configuration-03.png" alt=""></p><p>디버깅이 시작됩니다.</p><p><img src="../../../../images/typescript/typescript-basic-and-configuration-04.png" alt=""></p><p>DEBUG CONSOLE에 <code>Debugging</code>이 출력됩니다.</p><h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>타입스크립트를 공부하다보니 에러가 중간중간 생기는 바람에 공부하는 흐름이 끊긴 적이 간혹 있었습니다. 아래는 문제해결 방법입니다.</p><h4 id="cannot-find-name-‘console’"><a href="#cannot-find-name-‘console’" class="headerlink" title="cannot find name ‘console’."></a><code>cannot find name ‘console’.</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add --dev @types/node</span></span><br></pre></td></tr></table></figure><h4 id="Cannot-redeclare-block-scoped-variable-‘name’"><a href="#Cannot-redeclare-block-scoped-variable-‘name’" class="headerlink" title="Cannot redeclare block-scoped variable ‘name’."></a><code>Cannot redeclare block-scoped variable ‘name’.</code></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"lib"</span>: [</span><br><span class="line">            <span class="string">"es2015"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Unknown-compiler-option-‘strictPropertyInitialization’"><a href="#Unknown-compiler-option-‘strictPropertyInitialization’" class="headerlink" title="Unknown compiler option ‘strictPropertyInitialization’."></a><code>Unknown compiler option ‘strictPropertyInitialization’.</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add --dev typescript@latest</span></span><br></pre></td></tr></table></figure><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>이제 typescript를 공부하기 위한 최소한의 개발환경을 셋팅해보았습니다. 다음 포스팅부터 본격적으로 타입스크립트의 문법 및 기능들을 살펴보겠습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://poiemaweb.com/typescript-vscode" target="_blank" rel="noopener">Visual Studio Code에서의 TypeScript 개발 환경 구축</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/typescript/typescript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;타입스크립트&lt;/strong&gt;는 Microsoft에서 만든 정적 타입언어이며, 자바스크립트의 한계
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Typescript" scheme="http://jason0853.github.io/categories/Front-end/Typescript/"/>
    
    
      <category term="Typescript" scheme="http://jason0853.github.io/tags/Typescript/"/>
    
      <category term="tsconfig" scheme="http://jason0853.github.io/tags/tsconfig/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Features</title>
    <link href="http://jason0853.github.io/2018/02/20/ES6-Features/"/>
    <id>http://jason0853.github.io/2018/02/20/ES6-Features/</id>
    <published>2018-02-20T08:57:20.000Z</published>
    <updated>2019-05-18T06:10:55.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p>자바스크립트 관련 포스팅을 하면서 <strong>ES6</strong> 문법을 간혹 쓴 경우가 있었는데 이번 기회에 <strong>ES6</strong> 문법 기능을 한번 정리해보겠습니다. 물론 기존 Vanilla Javascript(ES5)도 우수하지만 <strong>ES6</strong> 문법을 혼용해서 쓰면 좀 더 간결하게 코드를 작성할 수 있고 다른 언어에서 지원되는 클래스(물론 무늬만)나 상수도 지원받을 수 있습니다.</p><h3 id="var-let-const"><a href="#var-let-const" class="headerlink" title="# var, let, const"></a># var, let, const</h3><p>기본적으로 <code>var</code>는 <strong>function-scope</strong>이고 <code>let</code>, <code>const</code>는 <strong>block-scope</strong>입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1000</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var i 호이스팅(hoisting) </span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);  <span class="comment">// 0, 1, 2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after loop'</span>, i);  <span class="comment">// after loop 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after loop'</span>, i);  <span class="comment">// after loop 1000</span></span><br></pre></td></tr></table></figure><ul><li>ES5 문법을 보면 함수 안에 <code>var i;</code>는 나중에 선언되었지만 에러가 나지 않고 <strong>호이스팅(hoisting)</strong>이 일어나면서 함수 최상단으로 끌어올려집니다. 위에서 언급한대로 <code>var</code>는 함수 스코프 단위로 범위가 정해져있기 때문에 loop가 끝나고 나서는 <code>console.log(‘after loop’, i);</code>는 함수 바깥에 선언된 변수 <code>i</code>에 접근하게 됩니다.</li><li>ES6 문법에서는 ES5와 달리 블록 단위로 변수 범위가 정해져있습니다. ES5처럼 굳이 함수를 만들지 않아도 위와 똑같은 결과물이 나옵니다. 하지만 <code>var</code>처럼 변수를 나중에 선언하게 되면은 호이스팅은 되지만 <code>Uncaught ReferenceError: i is not defined</code> 에러가 발생할 것입니다.. 그 이유는 <code>let</code>은 <strong>항상 선언이 된 뒤에 값이 할당되어야 한다는 전제 조건</strong>이 있기 때문입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name;</span><br><span class="line">name = <span class="string">'Jaesung'</span>;</span><br><span class="line">name = <span class="string">'Jason'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age;  <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><ul><li><code>let</code>는 <strong>선언은 먼저 하고 값은 나중에 할당</strong>해도 상관없습니다.</li><li><code>const</code>는 <strong>항상 선언과 값을 함께 할당</strong>해야 에러가 발생하지 않습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">33</span>;</span><br><span class="line">age = <span class="number">34</span>;  <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><ul><li><code>const</code>는 <strong>재할당 불가</strong>입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jaesung'</span>,</span><br><span class="line">  age: <span class="number">33</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'Jason'</span>;</span><br><span class="line">person.job = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">person = &#123;  <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">  job: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>const</code>는 <strong>객체의 property 값을 변경 및 새로운 property 값을 추가할 수 있지만 재할당 불가</strong>입니다.</li></ul><p>프로그래밍을 할 때 변경 가능한 상태(mutable state)를 최소화하는 습관을 들이는 것이 중요합니다. 왜냐하면 에러가 예상치 못한 곳에서 발생하기 때문에 디버깅하기가 너무 어렵기 때문입니다. 최근 자바스크립트에서는 <code>var</code>를 지양하고 <code>let</code>과 <code>const</code>를 지향하라고 권장합니다. </p><h3 id="Destructuring-Template-Literals-Spread-Operator"><a href="#Destructuring-Template-Literals-Spread-Operator" class="headerlink" title="# Destructuring / Template Literals / Spread Operator"></a># Destructuring / Template Literals / Spread Operator</h3><p><strong>Destructuring</strong>은 비구조화 할당이라고 하며 객체와 배열을 변수로 변환해주는 기능입니다.<br><strong>Template Literals</strong>은 <code><code>${}</code></code> 문법을 제공하여 좀 더 편리하게 문자열을 처리할 수 있는 기능입니다.<br><strong>Spread Operator</strong>은 전개 연산자라 하며 2개 이상의 인자, 요소, 변수들을 확장시키는 기능입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> movie = &#123;</span><br><span class="line">  title: <span class="string">'Friends with Benefits'</span>,</span><br><span class="line">  genre: <span class="string">'Romance'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">title</span>: tit, <span class="attr">genre</span>: gen, rating = <span class="string">'R'</span> &#125; = movie;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tit);  <span class="comment">// Friends with Benefits</span></span><br><span class="line"><span class="built_in">console</span>.log(gen);  <span class="comment">// Romance</span></span><br><span class="line"><span class="built_in">console</span>.log(rating);  <span class="comment">// R</span></span><br></pre></td></tr></table></figure><ul><li>위 코드 6번째 줄을 보면 객체의 속성을 별개의 변수로 추출하여 새로운 변수(<code>title: tit</code>, <code>genre: gen</code>) 및 default 값(<code>rating = ‘R’</code>)을 제공할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">showMovie(&#123;</span><br><span class="line">  title: <span class="string">'Jason Bourne'</span>,</span><br><span class="line">  genre: <span class="string">'Action'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMovie</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tit = opt.title,</span><br><span class="line">      genre = opt.genre,</span><br><span class="line">      rating = opt.rating || <span class="string">'R'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'title: '</span> + opt.title + <span class="string">', genre: '</span> + opt.genre + <span class="string">', rating: '</span> + rating);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMovie</span>(<span class="params">&#123; title: tit, genre, rating = <span class="string">'R'</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`title: <span class="subst">$&#123;tit&#125;</span>, genre: <span class="subst">$&#123;genre&#125;</span>, rating: <span class="subst">$&#123;rating&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// title: Jason Bourne, genre: Action, rating: R</span></span><br></pre></td></tr></table></figure><ul><li>ES6 문법을 적용하니 확실히 코드량이 줄어들었습니다. 특히 <strong>Template Literals</strong> 문법을 사용하니 ES5보다 문자열 처리가 간결해졌습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(...rest);  <span class="comment">// 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, age: <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>, job: <span class="subst">$&#123;<span class="keyword">this</span>.job&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subInfo = [<span class="number">33</span>, <span class="string">'Front-end Engineer'</span>];</span><br><span class="line"><span class="keyword">const</span> info = [<span class="string">'jason'</span>, ...subInfo];</span><br><span class="line"><span class="comment">// info.push(...subInfo);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(...info);</span><br><span class="line">p1.log();  <span class="comment">// name: Jason, age: 33, job: Front-end Engineer</span></span><br></pre></td></tr></table></figure><ul><li><code>…</code> <strong>전개 연산자</strong> 문법입니다.</li><li><strong>전개 연산자</strong>를 이용했기 때문에 굳이 <code>push()</code> 함수 및 파라미터 전달을 하나하나 할 필요가 없어졌습니다.</li></ul><p>이렇게 3가지 새로운 문법에 대해서 간략히 살펴보았는데 코드량이 상당히 줄어들어 가독성이 향상되는 장점이 있는 것 같습니다.</p><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="# Arrow Function"></a># Arrow Function</h3><p><strong>Arrow Function(화살표 함수)</strong>는 간결하고 <strong>this</strong>가 기존의 ES5와 다르게 작동합니다. 또한 생성자 함수로는 적합하지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Movie</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ES5</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.title);  <span class="comment">// Jason Bourne</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ES6</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.title);  <span class="comment">// Jason Bourne</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> Movie(<span class="string">'Jason Bourne'</span>);</span><br></pre></td></tr></table></figure><ul><li>ES5 문법에서 <code>bind(this)</code>를 하지 않으면 <code>this</code>는 window 객체를 가리킵니다.</li><li>ES6 문법에서는 <code>this</code>가 새로운 target으로 바인딩되지 않고 <code>Movie</code> 객체를 정확히 참조합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> playerInfo = [</span><br><span class="line">  &#123; <span class="attr">position</span>: <span class="string">'PG'</span>, <span class="attr">name</span>: <span class="string">'Kyrie Irving'</span>, <span class="attr">score</span>: <span class="number">20</span>, <span class="attr">retired</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">position</span>: <span class="string">'SG'</span>, <span class="attr">name</span>: <span class="string">'Kobe Bryant'</span>, <span class="attr">score</span>: <span class="number">30</span>, <span class="attr">retired</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">position</span>: <span class="string">'SG'</span>, <span class="attr">name</span>: <span class="string">'Tracy Mcgrady'</span>, <span class="attr">score</span>: <span class="number">25</span>, <span class="attr">retired</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">position</span>: <span class="string">'PF'</span>, <span class="attr">name</span>: <span class="string">'Aaron Gordon'</span>, <span class="attr">score</span>: <span class="number">20</span>, <span class="attr">retired</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">position</span>: <span class="string">'PF'</span>, <span class="attr">name</span>: <span class="string">'Tim Duncan'</span>, <span class="attr">score</span>: <span class="number">23</span>, <span class="attr">retired</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">const</span> sgTotalScore = playerInfo</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> info.retired === <span class="literal">true</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> info.position === <span class="string">'SG'</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> info.score;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, score</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + score;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> sgTotalScore = playerInfo</span><br><span class="line">  .filter(<span class="function"><span class="params">info</span> =&gt;</span> info.retired === <span class="literal">true</span>)</span><br><span class="line">  .filter(<span class="function"><span class="params">info</span> =&gt;</span> info.position === <span class="string">'SG'</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">info</span> =&gt;</span> info.score)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">prev, score</span>) =&gt;</span> (prev || <span class="number">0</span>) + score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sgTotalScore1);  <span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(sgTotalScore2);  <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><ul><li><strong>화살표 함수</strong> 또한 ES5로 작성한 코드보다 코드량이 확실히 줄어들었습니다. </li><li>parameter가 한 개이면 <code>()</code>안에 매개변수를 넣을 필요가 없습니다.</li><li>brackets <code>{}</code>이 없으면 <code>return</code>한 것과 같은 문법입니다.</li></ul><h3 id="class-keyword"><a href="#class-keyword" class="headerlink" title="# class keyword"></a># class keyword</h3><p><a href="https://jason0853.github.io/2018/01/09/Object-creation/">이전 포스팅</a>에 <strong>class</strong>에 대해 다룬 포스팅이 있으니 참고바랍니다.</p><h3 id="Generator"><a href="#Generator" class="headerlink" title="# Generator"></a># Generator</h3><p><strong>Generator</strong>는 비동기코드를 동기적으로 프로그매밍 할 수 있도록 도와주는 편한 기능입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jason'</span>, </span><br><span class="line">    profile: &#123;</span><br><span class="line">      age: <span class="number">33</span>, </span><br><span class="line">      gender: <span class="string">'Male'</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, </span><br><span class="line">    profile: &#123;</span><br><span class="line">      age: <span class="number">29</span>, </span><br><span class="line">      gender: <span class="string">'Female'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><div id="sequence-0"></div><p>위와 같은 데이터 구조(<code>data</code>)를 참조하여 다이어그램 순서대로 처리해서 결과값(gender)를 도출해야된다고 가정해봅시다.<br><strong>제너레이터</strong>를 좀 더 쉽게 사용하기 위해 <a href="https://www.npmjs.com/package/co" target="_blank" rel="noopener">co 라이브러리</a>를 사용해서 실습해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.filter(<span class="function">(<span class="params">e</span>) =&gt;</span> e.name === name );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProfile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.map(<span class="function">(<span class="params">e</span>) =&gt;</span> e.profile);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGender</span>(<span class="params">profile</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> gender = profile[<span class="number">0</span>].gender;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(gender);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="keyword">yield</span> getName(<span class="string">'Jason'</span>);</span><br><span class="line">  <span class="keyword">const</span> profile = <span class="keyword">yield</span> getProfile(name);</span><br><span class="line">  <span class="keyword">const</span> gender = <span class="keyword">yield</span> getGender(profile);</span><br><span class="line">  <span class="keyword">return</span> gender;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);  <span class="comment">// Male</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>yeild</code> 표현을 통해 함수의 return 값을 반환합니다.</li><li>만약 콜백으로 처리했다면 코드는 스파게티 코드처럼 더럽혀져 있었을겁니다.</li></ul><p>이번에는 co 라이브러리를 사용하지 않고 16 - 23번째 줄을 <strong>async/await</strong> 문법으로 바꿔 똑같은 결과물을 도출해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (중략)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">showGender</span>(<span class="params">personName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="keyword">await</span> getName(personName);</span><br><span class="line">  <span class="keyword">const</span> profile = <span class="keyword">await</span> getProfile(name);</span><br><span class="line">  <span class="keyword">const</span> gender = <span class="keyword">await</span> getGender(profile);</span><br><span class="line">  <span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line">showGender(<span class="string">'Jason'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));  <span class="comment">// Male</span></span><br></pre></td></tr></table></figure><ul><li><code>function*</code> -&gt; <code>async function</code>, <code>yield</code> -&gt; <code>await</code> 두 개의 키워드만 바뀌었고 Promise로 반환하는 것까지 똑같습니다. </li><li>라이브러리의 도움없이 사용할 수 있는 장점이 있지만 아직 브라우저의 표준 스펙은 아닙니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>이전 회사에서 ES6로 자바스크립트 개발을 해본 경험이 있었지만 개념을 제대로 익히지 않고 개발을 진행하다보니 ES6 문법 및 기능을 최대한 활용하지 못했던 것 같습니다. 역시 기본이 중요하다는 것을 깨닫는 좋은 시간이었습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">비구조화 할당</a><br><a href="http://meetup.toast.com/posts/73" target="_blank" rel="noopener">ES6의 제너레이터를 사용한 비동기 프로그래밍</a><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Get name->Get profile: nameGet profile->Get gender: profileNote right of Get gender: gender</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트 관련 포스팅을 하면서 &lt;strong&gt;ES6&lt;/strong&gt; 문법을 간혹 쓴 경우가 있었는데 이번 
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="ES6" scheme="http://jason0853.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Creating a modal plugin with jQuery</title>
    <link href="http://jason0853.github.io/2018/02/19/Creating-a-modal-plugin-with-jQuery/"/>
    <id>http://jason0853.github.io/2018/02/19/Creating-a-modal-plugin-with-jQuery/</id>
    <published>2018-02-18T15:21:37.000Z</published>
    <updated>2019-05-18T06:10:55.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p>UI 개발을 하다 보면 재사용하는 기능들을 <strong>플러그인</strong>으로 만들어서 사용하면 굉장히 편리합니다. 지난 포스팅해서 다뤘던 <strong>디자인 패턴(Design Pattern)</strong>들 응용해서 간단한 <strong>Modal Plugin</strong>을 제작해보겠습니다.</p><h3 id="Getting-ready-to-build-plugin"><a href="#Getting-ready-to-build-plugin" class="headerlink" title="# Getting ready to build plugin"></a># Getting ready to build plugin</h3><p>보통 UI 플러그인을 제작할 때 고려해야 하는 것들은 다음과 같습니다.</p><ul><li>CSS 파일을 제공할 것인가?</li><li>플러그인을 적용할 대상 태그는 무엇인가?</li><li>서드파티(third party) 라이브러리가 필요한가?</li><li>어떠한 메서드를 제공할 것인가?</li><li>어떠한 옵션을 제공할 것인가?</li></ul><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSS 내용 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html, body, div &#123; height: 100%; position: relative; margin: 0; padding: 0; box-sizing: border-box; &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 적용 대상 태그 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-show"</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- third party library 제공 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"modal.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드에서 보듯이 고려해야할 세가지 사항을 반영하였습니다. 이제 본격적으로 modal.js 를 만들어 보겠습니다.</p><h3 id="Let’s-build"><a href="#Let’s-build" class="headerlink" title="# Let’s build"></a># Let’s build</h3><figure class="highlight js"><figcaption><span>modal.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  </span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><ul><li>jQuery의 <code>$</code> 별칭을 사용할 때 다른 라이브러리와의 충돌을 방지하기 위해 <strong>IIFE</strong> 즉시 호출 함수 표현식을 사용하여 문제를 해결하는 것을 권장합니다.</li><li><code>‘use strcit’</code>를 함수 안에 적용함으로써 자바스크립트 코드를 좀 더 엄격하게 검사하고 적은 에러를 발생시킬 수 있습니다.</li></ul><figure class="highlight js"><figcaption><span>modal.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> modal = <span class="literal">null</span>,</span><br><span class="line">      params = <span class="literal">null</span>,</span><br><span class="line">      instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="keyword">var</span> Modal = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public</span></span><br><span class="line">  Modal.prototype = &#123;</span><br><span class="line">    version: <span class="string">'v1.0.0'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private</span></span><br><span class="line">  modal = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cacheDom();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheDom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$<span class="built_in">window</span> = $(<span class="built_in">window</span>);</span><br><span class="line">      <span class="keyword">this</span>.$modal = $(<span class="string">'#modal'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.Modal = Modal;</span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><ul><li>변수 <code>modal</code>은 <strong>Object Literal Pattern</strong>을 사용하여 각 기능을 작성할 예정입니다. 객체 리터럴이 생소하신 분들은 <a href="https://jason0853.github.io/2018/01/23/Using-design-pattern-to-refactory-jQuery-spaghetti-code/">지난 포스팅</a>을 참고해주시기 바랍니다.</li><li><code>params</code>는 옵션에 해당하는 객체의 결과값을 할당 받을 변수입니다.</li><li><code>instance</code> 변수는 <strong>Singleton Pattern</strong>을 적용하기 위해 미리 선언해두었습니다. 싱글톤 패턴에 대해 생소하신 분들은 <a href="https://jason0853.github.io/2018/02/05/Singleton-Pattern/">지난 포스팅</a>을 참고해주세요.</li><li><code>Modal.prototype</code>에 공개할 API 메서드를 return 할 예정입니다.</li></ul><p>UI 구조상 같은 유형의 모달을 동시에 여러개 띄우는 경우는 없으므로 <strong>싱글톤 패턴</strong>으로 만드는 것이 적합합니다. 그럼 constructor 부분애 코드를 추가해보겠습니다.</p><figure class="highlight js"><figcaption><span>modal.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> modal = <span class="literal">null</span>,</span><br><span class="line">      params = <span class="literal">null</span>,</span><br><span class="line">      instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="keyword">var</span> Modal = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      opt = opt || &#123;&#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> config = &#123;</span><br><span class="line">        width: opt.width || <span class="number">500</span>,</span><br><span class="line">        height: opt.height || <span class="string">'auto'</span>,</span><br><span class="line">        bgColor: opt.bgColor || <span class="string">'#eee'</span>,</span><br><span class="line">        title: opt.title || <span class="string">'Title'</span>,</span><br><span class="line">        content: opt.content || <span class="string">'Content'</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      params = $.extend(config, opt);</span><br><span class="line">  </span><br><span class="line">      modal.init();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> _self;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = initialize();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (중략)</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">window</span>.Modal = Modal;</span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><ul><li><code>$.extend()</code> 메서드를 이용하여 <code>config</code> 객체(default)와 <code>opt</code> 객체(사용자가 변경할 옵션)를 merge 시킵니다.</li><li><code>instance = initialize()</code> 값을 할당시키고 난 이후 새로운 객체를 만들려고 해도 <code>instance</code>가 더이상 undefined가 아니기 때문에 새로운 객체를 만들 수가 없어 싱글톤 패턴을 구현하게 됩니다.</li></ul><figure class="highlight js"><figcaption><span>modal.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (중략)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public method</span></span><br><span class="line">  Modal.prototype = &#123;</span><br><span class="line">    version: <span class="string">'v1.0.0'</span>,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      modal.show();</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      modal.hide();</span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span>(<span class="params">title, content</span>) </span>&#123;</span><br><span class="line">      modal.change(title, content);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private</span></span><br><span class="line">  modal = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cacheDom();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheDom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$<span class="built_in">window</span> = $(<span class="built_in">window</span>);</span><br><span class="line">      <span class="keyword">this</span>.$modal = $(<span class="string">'#modal'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$<span class="built_in">window</span>.on(<span class="string">'resize'</span>, <span class="keyword">this</span>.center.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.$modal.on(<span class="string">'click'</span>, <span class="string">'#modal-dim'</span>, <span class="keyword">this</span>.hide.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addDim();</span><br><span class="line">      <span class="keyword">this</span>.create();</span><br><span class="line">      <span class="keyword">this</span>.addTitle();</span><br><span class="line">      <span class="keyword">this</span>.addContent();</span><br><span class="line">      <span class="keyword">this</span>.center();</span><br><span class="line">      <span class="keyword">this</span>.$modal.hide();</span><br><span class="line">    &#125;,</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $modalBox = $(<span class="string">'&lt;div class="modal-box"&gt;&lt;/div&gt;'</span>),</span><br><span class="line">          boxStyles = &#123; <span class="attr">zIndex</span>: <span class="number">100</span>, <span class="attr">width</span>: params.width, <span class="attr">height</span>: params.height, <span class="attr">background</span>: params.bgColor &#125;;</span><br><span class="line">      $modalBox.css(boxStyles).appendTo(<span class="keyword">this</span>.$modal);</span><br><span class="line">    &#125;,</span><br><span class="line">    addDim: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $target = $(<span class="string">'&lt;div id="modal-dim"&gt;&lt;/div&gt;'</span>),</span><br><span class="line">          styles = &#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">0</span>, <span class="attr">bottom</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">height</span>: <span class="string">'100%'</span>, <span class="attr">background</span>: <span class="string">'#000'</span>, <span class="attr">opacity</span>: <span class="number">.7</span> &#125;;</span><br><span class="line">      $target.css(styles).appendTo(<span class="keyword">this</span>.$modal);</span><br><span class="line">    &#125;,</span><br><span class="line">    addTitle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $target = $(<span class="string">'&lt;div id="modal-title"&gt;&lt;/div&gt;'</span>),</span><br><span class="line">          $parentElem = <span class="keyword">this</span>.$modal.find(<span class="string">'.modal-box'</span>),</span><br><span class="line">          styles = &#123; <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">height</span>: <span class="string">'50px'</span>, <span class="attr">lineHeight</span>: <span class="string">'50px'</span>, <span class="attr">fontSize</span>: <span class="string">'1.5rem'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>, <span class="attr">textAlign</span>: <span class="string">'center'</span>, <span class="attr">borderBottom</span>: <span class="string">'1px solid #ccc'</span> &#125;;</span><br><span class="line">      $target.css(styles).appendTo($parentElem).text(params.title);</span><br><span class="line">    &#125;,</span><br><span class="line">    addContent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $target = $(<span class="string">'&lt;div id="modal-content"&gt;&lt;/div&gt;'</span>),</span><br><span class="line">          $parentElem = <span class="keyword">this</span>.$modal.find(<span class="string">'.modal-box'</span>),</span><br><span class="line">          styles = &#123; <span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">height</span>: <span class="string">'auto'</span>, <span class="attr">padding</span>: <span class="string">'1.5rem'</span>, <span class="attr">wordWrap</span>: <span class="string">'break-word'</span> &#125;;</span><br><span class="line">      $target.css(styles).appendTo($parentElem).text(params.content);</span><br><span class="line">    &#125;,</span><br><span class="line">    center: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $target = <span class="keyword">this</span>.$modal.find(<span class="string">'.modal-box'</span>),</span><br><span class="line">          wid = <span class="keyword">this</span>.$<span class="built_in">window</span>.width(),</span><br><span class="line">          hei = <span class="keyword">this</span>.$<span class="built_in">window</span>.height(),</span><br><span class="line">          targetWid = $target.width(),</span><br><span class="line">          targetHei = $target.height(),</span><br><span class="line">          styles = &#123; <span class="string">'position'</span>: <span class="string">'absolute'</span>, <span class="string">'left'</span>: (wid - targetWid) / <span class="number">2</span>, <span class="string">'top'</span>: (hei - targetHei) / <span class="number">2</span>&#125;;</span><br><span class="line">      $target.css(styles);</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$modal.show();</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$modal.hide();</span><br><span class="line">    &#125;,</span><br><span class="line">    change: <span class="function"><span class="keyword">function</span>(<span class="params">title, content</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $title = <span class="keyword">this</span>.$modal.find(<span class="string">'#modal-title'</span>),</span><br><span class="line">          $content = <span class="keyword">this</span>.$modal.find(<span class="string">'#modal-content'</span>);</span><br><span class="line">      </span><br><span class="line">      params.title = title;</span><br><span class="line">      params.content = content;</span><br><span class="line"></span><br><span class="line">      $title.text(title);</span><br><span class="line">      $content.text(content);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">window</span>.Modal = Modal;</span><br><span class="line">&#125;(jQuery));</span><br></pre></td></tr></table></figure><ul><li><code>modal</code> 객체에 method로 있는 <code>show</code>, <code>hide</code>, <code>change</code>를 <code>Modal.prototype</code>에 공개 API로 추가해줌으로써 새로운 인스턴스 객체가 생성되었을 때 <code>Modal</code> 생성자 속성 및 메서드에 접근할 수 있게 됩니다.</li></ul><p>아래코드는 modal.js 의 전체 코드입니다.</p><script src="//gist.github.com/c08a84293c05272dff8840be8869fda2.js"></script><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="# How to use"></a># How to use</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModal = <span class="keyword">new</span> Modal(&#123;</span><br><span class="line">  width: <span class="number">300</span>,</span><br><span class="line">  title: <span class="string">'타이틀'</span>,</span><br><span class="line">  content: <span class="string">'내용'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#btn-show'</span>).on(<span class="string">'click'</span>, myModal.show);</span><br></pre></td></tr></table></figure><p>아래와 같이 show 버튼을 클릭하면 modal이 노출되고 dim부분을 클릭하면 modal이 사라집니다.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/cb3o6gta/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>이번엔 <code>change()</code> 메서드를 이용하여 title과 content 파라미터를 변경해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModal = <span class="keyword">new</span> Modal();</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#btn-show'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myModal.change(<span class="string">'타이틀'</span>, <span class="string">'내용'</span>);</span><br><span class="line">  myModal.show();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#btn-error'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myModal.change(<span class="string">'에러'</span>, <span class="string">'에러입니다.'</span>);</span><br><span class="line">  myModal.show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/p300ujj7/embedded/result/light" frameborder="0" allowfullscreen></iframe><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>간단한 <strong>플러그인</strong>이지만 실제로 이렇게 만들어 보는 것이 중요한 것 같습니다. 자바스크립트 이론을 공부하면서 ‘실제로 개발할 때 어디에 적용해야되는걸까?’라는 의문을 던지게 됩니다. 예를 들어 싱글톤 패턴을 포스팅하면서도 개념만 익혔지 어디에 활용해야될지 사실 잘 몰랐습니다.ㅠㅠ 반성하게 됩니다.ㅎㅎ 포스팅이 생각보다 길어져서 중간중간 실수한 흔적이 보일 수도 있습니다. 혹시 수정해야할 부분이 있다면 댓글 부탁드립니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://blog.aliencube.org/ko/2014/01/02/reasons-behind-using-strict-mode-while-coding-javascript/" target="_blank" rel="noopener">자바스크립트에서 strict mode를 사용해야 하는 이유</a><br>모던 웹을 위한 JavaScript jQuery 입문 - 한빛미디어</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;UI 개발을 하다 보면 재사용하는 기능들을 &lt;strong&gt;플러그인&lt;/strong&gt;으로 만들어서 사용하면 굉장히
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Design Pattern" scheme="http://jason0853.github.io/tags/Design-Pattern/"/>
    
      <category term="jQuery" scheme="http://jason0853.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (캐시)</title>
    <link href="http://jason0853.github.io/2018/02/18/2018-kakao-blind-recruitment-round-1-3/"/>
    <id>http://jason0853.github.io/2018/02/18/2018-kakao-blind-recruitment-round-1-3/</id>
    <published>2018-02-18T07:52:13.000Z</published>
    <updated>2019-05-18T06:10:55.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>이번 문제는 난이도가 <a href="https://jason0853.github.io/2018/02/12/2018-kakao-blind-recruitment-round-1-2/">지난 포스팅</a>보다 쉬워서 조금 빨리 풀 수 있었습니다. 한번 같이 문제를 살펴볼까요?ㅋㅋ</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-3-01.png" alt=""></p><p>우선 제목에서도 볼 수 있듯이 캐시와 관련된 문제입니다. 캐시는 실제 개발할 때도 성능 개선을 하는데 있어서 중요한 부분을 차지하기 때문에 개발자들이 한번씩 같이 풀어보면 좋은 문제라고 생각합니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-3-02.png" alt=""></p><p>문제를 풀기 전에 주의할 점이나 모르는 용어들을 한 번 정리해보겠습니다.</p><ul><li>대소문자를 구분하지 않는 점.</li><li><strong>LRU(Least Recently Used)</strong> - cache(임시 저장소)에 저장시킬때 공간이 부족하여 오래된 데이터를 퇴출시키고 새로운 데이터로 교체하는 가장 효율이 좋은 알고리즘.</li><li><strong>cache hit</strong> - 캐시에 참조하려는 데이터가 존재할 때.</li><li><strong>cache miss</strong> - 캐시에 참조하려는 데이터가 존재하지 않을 때.</li></ul><p>입출력 및 조건 등을 다 읽어보니 실행시간을 구해내야합니다. 그럼 한번 알고리즘을 구현해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">3</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"NewYork"</span>, <span class="string">"LA"</span>, <span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"NewYork"</span>, <span class="string">"LA"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">3</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">2</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"NewYork"</span>, <span class="string">"LA"</span>, <span class="string">"SanFrancisco"</span>, <span class="string">"Seoul"</span>, <span class="string">"Rome"</span>, <span class="string">"Paris"</span>, <span class="string">"Jeju"</span>, <span class="string">"NewYork"</span>, <span class="string">"Rome"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">5</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"NewYork"</span>, <span class="string">"LA"</span>, <span class="string">"SanFrancisco"</span>, <span class="string">"Seoul"</span>, <span class="string">"Rome"</span>, <span class="string">"Paris"</span>, <span class="string">"Jeju"</span>, <span class="string">"NewYork"</span>, <span class="string">"Rome"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">2</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"NewYork"</span>, <span class="string">"newyork"</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">cacheSize</span>: <span class="number">0</span>, <span class="attr">cities</span>: [<span class="string">"Jeju"</span>, <span class="string">"Pangyo"</span>, <span class="string">"Seoul"</span>, <span class="string">"NewYork"</span>, <span class="string">"LA"</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache</span>(<span class="params">cacheSize, cities</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = [], HIT = <span class="number">1</span>, MISS = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cacheSize === <span class="number">0</span>) <span class="keyword">return</span> MISS * cities.length;</span><br><span class="line">  </span><br><span class="line">  cities.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> city = val.toLowerCase(),</span><br><span class="line">          currentSize = cache.length,</span><br><span class="line">          cacheIdx = cache.indexOf(city);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cacheIdx &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      time += HIT;</span><br><span class="line">      cache.splice(cacheIdx, <span class="number">1</span>);</span><br><span class="line">      cache.push(city);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentSize &gt;= cacheSize) cache.shift();</span><br><span class="line">      time += MISS;</span><br><span class="line">      cache.push(city);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> test) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(cache(obj.cacheSize, obj.cities));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 50, 21, 60, 52, 16, 25</span></span><br></pre></td></tr></table></figure><ul><li><code>cahceSize === 0</code>일 때는 <code>cities</code>를 Loop 처리해줄 필요가 없기 때문에 단순 연산을 한 뒤 return 시킵니다.</li><li>대소문자를 구분하지 않는다고 했으니 <code>toLowerCase()</code>를 이용하여 문자열을 소문자로 바꿔 <code>city</code>라는 변수에 할당시킵니다.</li><li><code>cache.indexOf(city)</code>를 실행시키면 일치하는 값이 있을 경우 해당 배열 index 값을 반환시켜주고 일치하는 값이 없을 경우 -1을 반환시켜줍니다.</li></ul><p><strong><em>주의) 입출력 예제에 없는 다른 유형의 예제도 고려해야함</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// cache size가 3일 경우</span><br><span class="line">[&quot;New York&quot;, &quot;LA&quot;, &quot;Las Vegas&quot;, &quot;LA&quot;]</span><br><span class="line">| new york |  |  |</span><br><span class="line">| new york | la |  |</span><br><span class="line">| new york | la | las vegas |</span><br><span class="line">| new york | las vegas | la |</span><br></pre></td></tr></table></figure><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-3-03.png" alt=""></p><p>문제 해설을 읽어보니 정답률이 많이 낮았습니다. 아마도 다른 경우를 고려하지 않고 답을 도출했을 경우 많이 틀렸을 것으로 예상됩니다. 솔직히 저도 스터디하는 친구가 코드 리뷰를 해주지 않았다면 이전 코드를 가지고 포스팅 했을겁니다.ㅠㅠ 그러나 이번 문제를 통해 LRU 알고리즘을 알게 된 좋은 계기가 되었던 것 같습니다.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>일주일에 한번씩 스터디를 진행하고 있는데 서로 짠 코드를 리뷰하는 것은 정말 많은 장점을 가진 것 같습니다. 미처 생각하지 못한 로직이나 성능, 그리고 코드 가독성 등 많은 것을 다른 동료한테 배울 수 있어서 너무 좋았습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 문제는 난이도가 &lt;a href=&quot;https://jason0853.githu
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (다트 게임)</title>
    <link href="http://jason0853.github.io/2018/02/12/2018-kakao-blind-recruitment-round-1-2/"/>
    <id>http://jason0853.github.io/2018/02/12/2018-kakao-blind-recruitment-round-1-2/</id>
    <published>2018-02-12T08:57:13.000Z</published>
    <updated>2019-05-18T06:10:55.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p><a href="https://jason0853.github.io/2018/02/05/2018-kakao-blind-recruitment-round-1-1/">지난 포스팅</a>에 이어 신입 공채 두번째 문제를 풀어보도록 하겠습니다. 지난번 문제보다는 살짝 어렵지만 너무 겁먹지 마세요. 막상 풀면 별거 아닌것 같습니다.ㅋㅋ</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-2-01.png" alt=""></p><p>문제가 길어서 이해하는데 지난번보다 오래 걸렸습니다. 위 문제 내용을 한번 요약해보겠습니다.</p><ul><li>총 기회는 3번</li><li>점수는 0-10점까지 (10점 두 자릿수이기 때문에 유의!)</li><li>S - 제곱, D - 2제곱, T - 3제곱</li><li>스타상(*) - 2배, 해당 점수 및 이전 점수 2배, 스타상끼리 중첩시 4배</li><li>아차상(#) - 해당 점수 마이너스, 스타상과 중첩시 마이너스 2배</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-2-02.png" alt=""></p><p>입출력 예제를 참고해서 똑같은 answer를 도출해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dartResult = [<span class="string">'1S2D*3T'</span>, <span class="string">'1D2S#10S'</span>, <span class="string">'1D2S0T'</span>, <span class="string">'1S*2T*3S'</span>, <span class="string">'1D#2S*3S'</span>, <span class="string">'1T2D3D#'</span>, <span class="string">'1D2S3T*'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dart</span>(<span class="params">point</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> scores = point.match(<span class="regexp">/\d+/g</span>),</span><br><span class="line">        bonus = point.match(<span class="regexp">/[SDT]/g</span>),</span><br><span class="line">        bonusOpt = point.match(<span class="regexp">/[SDT][#\*]?/g</span>),</span><br><span class="line">        temp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> score = <span class="built_in">Number</span>(scores[i]);</span><br><span class="line">          opt = bonusOpt[i].replace(<span class="regexp">/[SDT][\*]/g</span>, <span class="string">'*'</span>).replace(<span class="regexp">/[SDT][#]/g</span>, <span class="string">'#'</span>).replace(<span class="regexp">/[SDT]/g</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (bonus[i]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'D'</span>: temp.push(<span class="built_in">Math</span>.pow(score, <span class="number">2</span>)); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'T'</span>: temp.push(<span class="built_in">Math</span>.pow(score, <span class="number">3</span>)); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: temp.push(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">2</span>) &#123;</span><br><span class="line">          temp.map(<span class="function">(<span class="params">score, idx</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx !== <span class="number">0</span>) temp[idx] = score * <span class="number">2</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> temp.map(<span class="function">(<span class="params">score, idx</span>) =&gt;</span> temp[idx] = score * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#'</span>: temp[i] = temp[i] * <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) result += temp[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> point <span class="keyword">of</span> dartResult) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(dart(point));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: 37, 9, 3, 23, 5, -4, 59</span></span><br></pre></td></tr></table></figure><ul><li>숫자(1-10), 영문(SDT), 특수문자(#/*)를 <code>match()</code> 메서드를 이용하여 각 문자열을 배열로 반환해서 각 변수에 저장해두었습니다.<br><strong><em>정규식 <code>\d+</code> 통하여 두자릿수 숫자 10을 해결하였습니다.</em></strong></li><li>보너스와 옵션을 묶어서 <code>bonusOpt</code> 변수를 따로 둔 이유는 특수문자만 정규식을 사용하여 처리할 경우 스타상(*)과 아차상(#)을 몇번째 점수에 처리해야될지 미지수이기 때문입니다.</li><li><code>replace()</code> 메서드를 이용하여 스타상이 있을 경우(*), 아차상이 있을 경우(#), 둘다 없을 경우(null) 값으로 처리하여 배열로 반환합니다.</li><li><code>Math.pow()</code> 메서드를 이용하여 점수와 보너스 거듭 제곱 연산처리를 해줍니다. 문자열 ‘S’는 1제곱이므로 따로 할 필요가 없습니다.</li><li>스타상(*)일 경우 조건문을 통해 해당 점수의 이전 점수까지만 2배 처리를 해줍니다.<br><strong><em>조건문이 추가되지 않고 세번째 점수에 아차상이 존재할 경우 모든 점수에 2배 점수가 적용됩니다. 이 부분에 유의해주세요.</em></strong></li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-2-03.png" alt=""></p><p>문제 해설을 보니 정규식을 이용하여 문자열 처리를 잘 활용할 수 있는지 묻는 문제였습니다.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>결국 문제는 풀었지만 최적화에 대해 좀 더 고민을 해야될 것 같습니다. 여유가 생기면 다시 한번 고민해서 풀어보고 포스팅 해보겠습니다. 그리고 이번 다트 게임 문제를 통하여 정규식 공부를 열심히 해야겠다는 생각을 하게 되었습니다. 매번 구글링을 통해 copy/paste 했던 제 자신이 한심해지네요.ㅠㅠ 위 코드에 잘못된 부분이나 좀 더 나은 로직을 공유해주실 분은 댓글 부탁드립니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jason0853.github.io/2018/02
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Singleton Pattern</title>
    <link href="http://jason0853.github.io/2018/02/05/Singleton-Pattern/"/>
    <id>http://jason0853.github.io/2018/02/05/Singleton-Pattern/</id>
    <published>2018-02-05T08:34:34.000Z</published>
    <updated>2019-05-18T06:10:55.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p><strong>Singleton Pattern(싱글톤 패턴)</strong>은 ‘single’이라는 단어 그대로 <strong>오직 하나의 객체 생성만을 허용</strong>하는 것을 뜻합니다. </p><h3 id="Object-Literal"><a href="#Object-Literal" class="headerlink" title="# Object Literal"></a># Object Literal</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 == p2);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><code>p1</code>, <code>p2</code> 객체의 속성과 메서드는 같지만 객체를 비교해보면 <code>false</code>가 나옵니다.</li><li><strong>Object Literal</strong>을 이용한 객체 생성 방법은 이미 싱글톤 패턴과 동일합니다.<br><strong><em>주의) Object Literal은 객체의 속성들이 전부 공개되어 외부에서 조작할 수 있는 단점이 있습니다.</em></strong></li></ul><h3 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="# Singleton Pattern"></a># Singleton Pattern</h3><p>그럼 이제 제대로 된(비공개) 싱글톤 패턴을 만들어 보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">'single'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: name,</span><br><span class="line">      show: show</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = init();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> single1 = singleton.getInstance();</span><br><span class="line"><span class="keyword">const</span> single2 = singleton.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(single1 == single2);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(single1 === single2);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">single1.name = <span class="string">'Singleton Pattern'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(single2.name);  <span class="comment">// 'Singleton Pattern'</span></span><br></pre></td></tr></table></figure><ul><li><strong>IIFE(즉시 호출 패턴)</strong>을 사용하여 외부에서 접근하지 못하도록 막아줍니다.</li><li><code>init()</code> 함수 내부에 private(비공개) 변수 및 함수를 선언해주고 반환시켜줍니다.</li><li><code>getInstance</code>는 유일한 공개 메서드입니다. 처음 호출할 때 <code>instance</code> 변수가 <code>undefined</code>이기 때문에 <code>init()</code> 함수를 호출한 뒤에 <code>instance</code> 변수에 <code>init</code> 함수 리턴값을 저장시켜줍니다. 두번째 호출할 때는 <code>instance</code>값에 처음 호출된 객체값이 저장되어 있기 때문에 <code>init</code> 함수를 호출하지 않고 바로 리턴시킵니다.</li><li>싱글톤이기 때문에 <code>single1.name</code> 속성이 바뀌면 <code>single2.name</code>도 변경됩니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p><strong>싱글톤 패턴</strong> 특징</p><ul><li>하나의 객체만 생성.</li><li>동일한 객체의 다수의 인스턴스 허용.</li><li>여러 객체를 만들지 못하도록 제한하고 첫번째 객체가 생성된 후에는 첫번째 객체 자체를 리턴시킵니다.</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know" target="_blank" rel="noopener">4 JavaScript Design Patterns You Should Know</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton Pattern(싱글톤 패턴)&lt;/strong&gt;은 ‘single’이라는 단어 그대
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Design Pattern" scheme="http://jason0853.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>2018 카카오 코딩 테스트 (비밀 지도)</title>
    <link href="http://jason0853.github.io/2018/02/05/2018-kakao-blind-recruitment-round-1-1/"/>
    <id>http://jason0853.github.io/2018/02/05/2018-kakao-blind-recruitment-round-1-1/</id>
    <published>2018-02-05T04:41:22.000Z</published>
    <updated>2019-05-18T06:10:55.390Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png" alt=""></p><p>최근 카카오에서 신입 공채로 코딩 테스트를 진행했었습니다. 문제들을 보니 재미있을 것 같아서 한번 풀어보고 블로그에 포스팅 해보기로 하였습니다.<br>우선 1번 문제인 비밀지도(난이도: 하) 문제부터 차례대로 포스팅해보겠습니다.</p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-1-01.png" alt=""></p><p>그림과 문제를 보고 저 나름대로 짧게 다시 요약해보겠습니다.</p><ul><li>첫번째 지도 + 두번째 지도 = 세번째 지도</li><li># = 1, 공백 = 0</li><li>두 지도와 2진수를 각각 비교해보겠습니다. 예를 들어 빨강색으로 표시된 부분만 한 번 비교해보겠습니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 지도 비교</span><br><span class="line">###</span><br><span class="line"># # #</span><br><span class="line">-----</span><br><span class="line">### #</span><br><span class="line"></span><br><span class="line">// 이진수 비교</span><br><span class="line">11100</span><br><span class="line">10101</span><br><span class="line">-----</span><br><span class="line">11101</span><br></pre></td></tr></table></figure><p><strong><em>결국 이진수 11101은 ###공백#입니다.</em></strong></p><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-1-02.png" alt=""></p><p>입출력 예제에서 첫번째 매개변수 값과 두번째 매개변수 값을 가지고 출력이 똑같이 나오도록 하겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addZero</span>(<span class="params">digits, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> zero = <span class="string">'0'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (data.length !== digits) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = digits - data.length; i &lt; len; i++) &#123;</span><br><span class="line">      data = zero + data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">secretMap</span>(<span class="params">n, arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> testNum1, testNum2;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    testNum1 = arr1[i].toString(<span class="number">2</span>);</span><br><span class="line">    testNum2 = arr2[i].toString(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    testNum1 = addZero(n, testNum1);</span><br><span class="line">    testNum2 = addZero(n, testNum2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Number</span>(testNum1[i]) || <span class="built_in">Number</span>(testNum2[i])) chars += <span class="string">'#'</span>;</span><br><span class="line">      <span class="keyword">else</span> chars += <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.push(chars);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secretMap(<span class="number">5</span>, [<span class="number">9</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">11</span>], [<span class="number">30</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">28</span>]);</span><br><span class="line">secretMap(<span class="number">6</span>, [<span class="number">46</span>, <span class="number">33</span>, <span class="number">33</span> ,<span class="number">22</span>, <span class="number">31</span>, <span class="number">50</span>], [<span class="number">27</span> ,<span class="number">56</span>, <span class="number">19</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output1 : ["#####","# # #", "### #", "# ##", "#####"]</span></span><br><span class="line"><span class="comment">// output2 : ["######", "### #", "## ##", " #### ", " #####", "### # "]</span></span><br></pre></td></tr></table></figure><ul><li><code>toString(2)</code> 메서드를 통해 10진수를 2진수로 변경합니다.</li><li><code>addZero</code> 메서드를 통해 0을 앞에 추가하면서 자릿수를 맞춰줍니다.</li><li><code>||</code> OR 연산자를 통해 하나라도 참이면 ‘#’, 둘 다 거짓이면 공백 처리를 해줍니다.</li></ul><p><img src="../../../../images/algorithm/2018-kakao-blind-recruitment-round-1-1-03.png" alt=""></p><p>정답은 맞혔지만 위 문제 해설을 보면은 <strong>비트 연산</strong>을 잘 활용할 수 있는지를 묻는 문제였습니다. 그럼 <strong>비트 연산</strong>을 통해 다시 풀어보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">secretMap</span>(<span class="params">n, arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> int = (arr1[i] | arr2[i]);</span><br><span class="line">    <span class="keyword">const</span> binary = int.toString(<span class="number">2</span>);</span><br><span class="line">    result.push(binary.replace(<span class="regexp">/1/g</span>, <span class="string">'#'</span>).replace(<span class="regexp">/0/g</span>, <span class="string">' '</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secretMap(<span class="number">5</span>, [<span class="number">9</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">11</span>], [<span class="number">30</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">28</span>]);</span><br><span class="line">secretMap(<span class="number">6</span>, [<span class="number">46</span>, <span class="number">33</span>, <span class="number">33</span> ,<span class="number">22</span>, <span class="number">31</span>, <span class="number">50</span>], [<span class="number">27</span> ,<span class="number">56</span>, <span class="number">19</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output1 : ["#####","# # #", "### #", "# ##", "#####"]</span></span><br><span class="line"><span class="comment">// output2 : ["######", "### #", "## ##", " #### ", " #####", "### # "]</span></span><br></pre></td></tr></table></figure><ul><li><code>|</code> <strong>비트 연산 OR</strong>을 사용하면 연산 자체는 2진수로 하지만 반환값은 자바스크립트 표준값으로 나옵니다.<br>예) 9 | 30 = 31</li><li><code>toString(2)</code>을 통해 2진수 값으로 변환합니다.</li><li><code>replace()</code> 메서드를 통해 2진수 문자열을 1일 때 ‘#’, 0일 때 공백 처리를 해줍니다. 첫번째 인자에 있는 플래그(Flag) <code>g</code>는 문자열 전체를 검색해줍니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>블로그를 포스팅하면서 첫번째 알고리즘을 다뤄봤습니다. <strong>비트 연산</strong>을 묻는 의도인 것을 파악하지 않고 풀었을 경우와 알고 풀었을 경우의 코드를 비교해보니 코드량이 1/3로 줄었습니다. 포스팅을 보신 뒤 잘못된 부분이나 좀 더 최적화 코드를 공유해주실 분은 댓글 부탁드립니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://tech.kakao.com/2017/09/27/kakao-blind-recruitment-round-1/" target="_blank" rel="noopener">카카오톡 문제 및 해설</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/algorithm/2018-kakao-blind-recruitment-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근 카카오에서 신입 공채로 코딩 테스트를 진행했었습니다. 문제들을 보니 재미있
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://jason0853.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming</title>
    <link href="http://jason0853.github.io/2018/02/02/Functional-Programming/"/>
    <id>http://jason0853.github.io/2018/02/02/Functional-Programming/</id>
    <published>2018-02-02T06:37:46.000Z</published>
    <updated>2019-05-18T06:10:55.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p><strong>Functional Programming(함수형 프로그래밍)</strong>은 기존 <a href="https://jason0853.github.io/2018/01/10/OOP-Inheritance/">객체지향 프로그래밍</a>처럼 객체에 존재하는 property나 method를 사용하는 것과 달리 이름 그대로 함수를 기반으로 프로그래밍하는 기법입니다. 최근 개발자들 사이에서 <strong>함수형 프로그래밍</strong>이 trend로 잡고 있는데 어떤 점이 좋은지 한번 정리해보겠습니다.</p><h3 id="The-advantage-of-Functional-Programming"><a href="#The-advantage-of-Functional-Programming" class="headerlink" title="# The advantage of Functional Programming"></a># The advantage of Functional Programming</h3><ul><li>버그가 적음.</li><li>추론하기가 쉬움.</li><li>시간 절약.</li></ul><p>우선 기본적으로 함수형 프로그래밍을 어떻게 하는지 알아보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = sum;</span><br><span class="line"></span><br><span class="line">result(<span class="number">3</span>);  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>위 코드처럼 함수는 변수에 할당될 수 있으며 <strong>입출력이 순수</strong>하기 하기 때문에 <strong>side-effect가 전혀 없습니다.</strong> 그럼 자바스크립트에서 <strong>Higher-Order Function</strong>하면 자주 언급되는 함수들과 필요한 개념들을 한번 살펴보겠습니다.</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="# Filter"></a># Filter</h3><p>조건에 부합하는 값들을 필터링해서 새로운 배열을 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> players = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kyrie Irving'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kobe Bryant'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tracy Mcgrady'</span>, <span class="attr">retire</span>: <span class="literal">true</span>  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Aaron Gordon'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tim Duncan'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isRetired = <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> player.retire === <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> retiredPlayers = players.filter(isRetired);</span><br><span class="line"><span class="keyword">let</span> currentPlayers = _.reject(players, isRetired);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output: retiredPlayers */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[ &#123; name: 'Kobe Bryant', retire: true &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Tracy Mcgrady', retire: true &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Tim Duncan', retire: true &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output: currentPlayers */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[ &#123; name: 'Kyrie Irving', retire: false &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Aaron Gordon', retire: false &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><code>filter</code>라는 자바스크립트 내장 함수를 사용함으로써 for loop와 if 구문을 사용할 필요가 없어졌습니다. 결론적으로 코드는 좀 더 간결해졌습니다.</li><li><code>isRetired</code> 변수를 함수형으로 표현함으로써 재사용성이 높아지게 되었습니다.</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="# Map"></a># Map</h3><p>기존 데이터에서 필요한 값들만 추출해서 새로운 배열을 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> players = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kyrie Irving'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kobe Bryant'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tracy Mcgrady'</span>, <span class="attr">retire</span>: <span class="literal">true</span>  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Aaron Gordon'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tim Duncan'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = players.map(<span class="function"><span class="params">x</span> =&gt;</span> x.name);  <span class="comment">// arrow function(=&gt;) - es6 문법</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: names</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">["Kyrie Irving", "Kobe Bryant", "Tracy Mcgrady", "Aaron Gordon", "Tim Duncan"]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>ES6 문법을 사용하여 코드를 한 줄로 정리하였습니다.</li><li>파라미터명을 player라고 명명할수도 있지만 <strong>함수형 프로그래밍</strong>에서는 <code>x</code>라고 짧게 하는 것이 일반적입니다.</li></ul><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="# Reduce"></a># Reduce</h3><p>기존 데이터 값들을 가지고 연산에 의해 반환되는 값을 구할때 주로 사용하는 메서드입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orders = [</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">30000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">5000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">10000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">20000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalPrice = orders.reduce(<span class="function">(<span class="params">sum, order</span>) =&gt;</span> sum + order.price, <span class="number">0</span>);  <span class="comment">// arrow function(=&gt;) - es6 문법</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output: totalPrice</span></span><br><span class="line"><span class="comment">// 66000</span></span><br></pre></td></tr></table></figure><ul><li><code>reduce</code>의 두번째 파라미터는 초기값을 설정해주기 때문에 변수로 initial 값을 지정해 줄 필요가 없어졌습니다.</li></ul><h3 id="Closure"><a href="#Closure" class="headerlink" title="# Closure"></a># Closure</h3><p><strong>Closure(클로저)</strong>란 외부함수가 실행이 끝났음에도 불구하고 내부함수가 외부함수의 변수에 접근할 수 있는 것을 가리킵니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _number = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _number++;</span><br><span class="line">    <span class="keyword">return</span> _number;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> increase = count();  <span class="comment">// increase -&gt; 클로저</span></span><br><span class="line">increase();  <span class="comment">// 1</span></span><br><span class="line">increase();  <span class="comment">// 2</span></span><br><span class="line">increase();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><code>count()</code> 함수가 실행되어 내부함수를 return하여 종료되었음에도 불구하고 <code>increase()</code> 함수는 호출되면서 <code>count</code> 함수의 지역변수인 <code>_number</code>에 접근하게 되어 값이 제대로 출력됩니다.</li><li><code>increase</code>에서 <strong>클로저</strong>가 생성됩니다.</li></ul><p>이번에 조금 다른 예제로 클로저를 다뤄보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeNumber</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum3 = makeNumber(<span class="number">3</span>);  <span class="comment">// sum3 -&gt; 클로저</span></span><br><span class="line"><span class="keyword">var</span> sum5 = makeNumber(<span class="number">5</span>);  <span class="comment">// sum5 -&gt; 클로저</span></span><br><span class="line">sum3(<span class="number">10</span>);  <span class="comment">// 13</span></span><br><span class="line">sum5(<span class="number">10</span>);  <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><ul><li><code>makeNumber</code>는 두 개의 새로운 함수들을 만들기 위해 <strong>함수 팩토리</strong>를 사용합니다.</li><li><code>a</code> 인자를 보통 자유변수라고 부르며 <code>b</code> 인자를 묶인 변수라고 합니다.</li><li>문법적 환경으로 바라보았을 때 <code>sum3</code>의 <code>a = 3</code>이며, <code>sum5</code>의 <code>a = 5</code>입니다.</li></ul><h3 id="Currying"><a href="#Currying" class="headerlink" title="# Currying"></a># Currying</h3><p><strong>Currying(커링)</strong>은 한 번에 모든 인자를 전달하지 않고 첫번째 인자를 전달하고 두번째 인자를 전달할 새 함수를 반환합니다. 이렇게 인자의 일부만 받도록 하는 기법을 <strong>커링</strong>이라고 부릅니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = </span><br><span class="line">      name =&gt; </span><br><span class="line">        age =&gt; </span><br><span class="line">          job =&gt; </span><br><span class="line">            <span class="string">`I'm <span class="subst">$&#123;name&#125;</span>. I'm <span class="subst">$&#123;age&#125;</span>. I work as a <span class="subst">$&#123;job&#125;</span>.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> personName = person(<span class="string">'Jason'</span>);</span><br><span class="line"><span class="keyword">let</span> personAge = personName(<span class="number">33</span>);</span><br><span class="line">personAge(<span class="string">'Front-end Engineer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="comment">// I'm Jason. I'm 33. I work as a Front-end Engineer.</span></span><br></pre></td></tr></table></figure><ul><li><code>person</code> 함수는 <strong>커링</strong> 기법을 사용할 수 있게 파라미터 이후에 함수를 계속 리턴해주었습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="function">(<span class="params">name, age, job</span>) =&gt;</span> <span class="string">`I'm <span class="subst">$&#123;name&#125;</span>. I'm <span class="subst">$&#123;age&#125;</span>. I work as a <span class="subst">$&#123;job&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">person = _.curry(person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> personName = person(<span class="string">'Jason'</span>); </span><br><span class="line"><span class="keyword">let</span> personAge = personName(<span class="number">33</span>);</span><br><span class="line">personAge(<span class="string">'Front-end Engineer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="comment">// I'm Jason. I'm 33. I work as a Front-end Engineer.</span></span><br></pre></td></tr></table></figure><ul><li>lodash 라이브러리를 이용하여 <code>person</code> 함수를 <strong>커링</strong>할 수 있는 함수로 만들어 보았습니다.</li></ul><p>위에서 filter 함수를 다뤄보았을 때 underscore 라이브러리를 사용하여 은퇴한 선수들과 현역 선수들을 구분했었습니다. 이번에는 lodash의 curry 함수를 사용하여 구분해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> players = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kyrie Irving'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kobe Bryant'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tracy Mcgrady'</span>, <span class="attr">retire</span>: <span class="literal">true</span>  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Aaron Gordon'</span>, <span class="attr">retire</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tim Duncan'</span>, <span class="attr">retire</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> retired = _.curry(<span class="function">(<span class="params">val, obj</span>) =&gt;</span> obj.retire === val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> retiredPlayers = players.filter(retired(<span class="literal">true</span>));</span><br><span class="line"><span class="keyword">let</span> currentPlayers = players.filter(retired(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output: retiredPlayers */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[ &#123; name: 'Kobe Bryant', retire: true &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Tracy Mcgrady', retire: true &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Tim Duncan', retire: true &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output: currentPlayers */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[ &#123; name: 'Kyrie Irving', retire: false &#125;,</span></span><br><span class="line"><span class="comment">  &#123; name: 'Aaron Gordon', retire: false &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="# Recursion"></a># Recursion</h3><p><strong>Recursion(재귀)</strong>는 함수가 자기 자신을 호출하는 것을 말하며, 어느 조건을 주었을 경우 만족할 때까지 반복문처럼 계속 호출합니다. <strong>함수형 프로그래밍</strong>에서는 반복문 대신 재귀를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  count(num<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">count(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><code>count</code> 함수는 0이 되기 전까지 계속 자기 자신을 호출하기 때문에 <strong>재귀함수</strong>라고 할 수 있습니다.</li></ul><p>이번에는 <strong>재귀함수</strong>를 응용해서 object tree 구조를 한 번 만들어보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> categories = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'human'</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'men'</span>, <span class="attr">parent</span>: <span class="string">'human'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'women'</span>, <span class="attr">parent</span>: <span class="string">'human'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'jason'</span>, <span class="attr">parent</span>: <span class="string">'men'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'tom'</span>, <span class="attr">parent</span>: <span class="string">'men'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'jane'</span>, <span class="attr">parent</span>: <span class="string">'women'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Result */</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  human: &#123;</span><br><span class="line">    men: &#123;</span><br><span class="line">      <span class="string">'jason'</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">'tom'</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    women: &#123;</span><br><span class="line">      <span class="string">'jane'</span>: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>categories</code>라는 데이터베이스가 있다고 가정하고 재귀함수를 사용하여 위와 같이 똑같은 결과값이 나오도록 해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> categories = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'human'</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'men'</span>, <span class="attr">parent</span>: <span class="string">'human'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'women'</span>, <span class="attr">parent</span>: <span class="string">'human'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'jason'</span>, <span class="attr">parent</span>: <span class="string">'men'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'tom'</span>, <span class="attr">parent</span>: <span class="string">'men'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'jane'</span>, <span class="attr">parent</span>: <span class="string">'women'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> makeObjectTree = <span class="function">(<span class="params">categories, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  categories</span><br><span class="line">    .filter(<span class="function"><span class="params">c</span> =&gt;</span> c.parent === parent)</span><br><span class="line">    .forEach(<span class="function"><span class="params">c</span> =&gt;</span> obj[c.id] = makeObjectTree(categories, c.id));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(makeObjectTree(categories, <span class="literal">null</span>), <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  human: &#123;</span></span><br><span class="line"><span class="comment">    men: &#123;</span></span><br><span class="line"><span class="comment">      'jason': &#123;&#125;,</span></span><br><span class="line"><span class="comment">      'tom': &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    women: &#123;</span></span><br><span class="line"><span class="comment">      'jane': &#123;&#125;,</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><code>JSON.stringify()</code>를 사용해서 자바스크립트 값을 JSON 문자열로 변경하였습니다.</li></ul><p><strong><em>주의) 반복문보다 속도가 느리며 stack을 사용하기 때문에 재귀호출이 많아지면 성능상에 이슈가 발생합니다.</em></strong></p><h3 id="Promise"><a href="#Promise" class="headerlink" title="# Promise"></a># Promise</h3><p><strong>Promise</strong>는 콜백처럼 비동기를 다루는 방식 중에 하나입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">'string'</span>) &#123;</span><br><span class="line">    reslove(str);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">'This argument must be string'</span>;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(msg));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([ test(<span class="string">'test1'</span>), test(<span class="string">'test2'</span>), test(<span class="string">'test3'</span>) ])</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> arr.push(val));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// ["test1", "test2", "test3"]</span></span><br></pre></td></tr></table></figure><ul><li><code>Promise</code>는 ECMA6의 글로벌 객체에 포함되어 있으며 표준으로 채택되었습니다.</li><li><strong>Promise</strong>의 가장 큰 장점은 콜백 지옥에서 벗어날 수 있다는 점입니다.</li></ul><h3 id="Functor"><a href="#Functor" class="headerlink" title="# Functor"></a># Functor</h3><p><strong>Functor</strong>는 map(매핑)될 수 있는 객체이며, 주로 컴퓨터 공학에서 사용됩니다. 기존 값들은 유지 및 변형시키면서 새로운 결과물(<strong>functor</strong>)를 얻게 됩니다. 아래 예제를 통해 한번 설명을 해보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);  <span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><ul><li><code>map</code> 메서드를 통해 변형이 일어납니다. 하지만 기존 <code>arr</code> 배열안에 있는 값들은 바뀌지 않습니다.</li><li><code>newArr</code>은 <code>map</code> 메서드를 통해 새로운 배열, 즉 매핑될 수 있는 새로운 <strong>functor</strong>를 얻게 됩니다.</li></ul><p>아래 코드도 위와 같은 <strong>functor</strong>의 또 다른 예제입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jason'</span>, <span class="attr">age</span>: <span class="number">33</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Tom'</span>, <span class="attr">age</span>: <span class="number">37</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  newObj[obj.name] = obj.age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);  <span class="comment">// [&#123;"Jason":32&#125;,&#123;"Jane":30&#125;,&#123;"Tom":31&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p><strong>함수형 프로그래밍</strong>의 특징</p><ul><li><strong>High Order Function</strong>을 통한 코드 재사용성.</li><li>항상 부작용이 없는 <strong>Pure Function</strong> 유지.</li><li><code>for</code>, <code>if</code>구문식보다는 <strong>표현식</strong> 사용. </li><li><strong>Immutable</strong>한 데이터 구조.</li></ul><p>지금까지 함수형 프로그래밍을 다루면서 필요한 개념들을 다뤄보았습니다. 위 포스팅에 잘못된 내용이나 오타가 있는 부분은 댓글 부탁드립니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures" target="_blank" rel="noopener">Mozilla - 클로저</a><br><a href="http://sungjk.github.io/2017/07/17/fp.html" target="_blank" rel="noopener">함수형 프로그래밍이란 무엇인가?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functional Programming(함수형 프로그래밍)&lt;/strong&gt;은 기존 &lt;a hre
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Using design pattern to refactory jQuery spaghetti code</title>
    <link href="http://jason0853.github.io/2018/01/23/Using-design-pattern-to-refactory-jQuery-spaghetti-code/"/>
    <id>http://jason0853.github.io/2018/01/23/Using-design-pattern-to-refactory-jQuery-spaghetti-code/</id>
    <published>2018-01-23T05:56:06.000Z</published>
    <updated>2019-05-18T06:10:55.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p><strong>jQuery</strong> 라이브러리를 이용하여 화면 개발을 많이 했었지만 <strong>Javascript</strong> 공부를 제대로 하지 않고 코드를 짜면 엉망진창이 되기 쉽상이었습니다. 특히 프로젝트가 끝나고 유지보수 단계에 들어가면 한군데 수정하면 다른데도 수정해야되고 정말 귀찮았습니다. 그래서 Javascript 기본 개념을 다시 깨우치고 공부하면서 터득한 걸 공유해보겠습니다.</p><p>일단 앞으로 만들 결과물을 한 번 공개해보겠습니다.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/f6zjqge8/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe><p>간단히 결과물을 설명해드리면, 좋아하는 선수 이름을 리스트에 추가, 삭제하는 기능과 라디오버튼이 on이였을 경우 count를 하고 off였을 경우는 count를 하지 않는 기능을 넣는 simple한 apllication입니다. CDN을 통해 <a href="https://cdnjs.com/libraries/jquery/1.12.4" target="_blank" rel="noopener">jquery 1.12.4</a>를 추가하였습니다. 이제 js 소스를 한번 살펴보겠습니다.</p><figure class="highlight js"><figcaption><span>script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = [];</span><br><span class="line"></span><br><span class="line">checkCount();</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#player'</span>).find(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = $(<span class="string">'#player'</span>).find(<span class="string">'input'</span>).val(),</span><br><span class="line">      item = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;span&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;button type="button"&gt;Delete&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    alert(<span class="string">'Player 이름을 입력해주세요.'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  $(<span class="string">'#player'</span>).find(<span class="string">'ul'</span>).append(item);</span><br><span class="line">  players.push(value);</span><br><span class="line">  $(<span class="string">'#player'</span>).find(<span class="string">'input'</span>).val(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  checkCount();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#player'</span>).find(<span class="string">'ul'</span>).on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $remove = $(e.target).closest(<span class="string">'li'</span>),</span><br><span class="line">      idx = $(<span class="string">'#player'</span>).find(<span class="string">'ul'</span>).find(<span class="string">'li'</span>).index($remove);</span><br><span class="line"></span><br><span class="line">  $remove.remove();</span><br><span class="line">  players.splice(idx, <span class="number">1</span>);</span><br><span class="line">  checkCount();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#count'</span>).find(<span class="string">'.radios'</span>).find(<span class="string">'input'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  checkCount();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> val = $(<span class="string">'#count'</span>).find(<span class="string">'input[type=radio]:checked'</span>).val(),</span><br><span class="line">      $result = $(<span class="string">'#count'</span>).find(<span class="string">'.result'</span>).find(<span class="string">'span'</span>);</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">if</span> (val == <span class="string">'on'</span>) $result.text(players.length);</span><br><span class="line">  <span class="keyword">else</span> $result.text(<span class="string">'?'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>솔직히 코드 양이 많지 않아 spaghetti code처럼 보이지 않지만 한 페이지에 이런 기능들이 많다고 가정해봅시다.</p><h3 id="The-disadvantage-of-unstructured-spaghetti-code"><a href="#The-disadvantage-of-unstructured-spaghetti-code" class="headerlink" title="# The disadvantage of unstructured spaghetti code"></a># The disadvantage of unstructured spaghetti code</h3><ul><li>코드 양이 한 파일에 너무 많아 가독성이 좋지 않음.</li><li>유지보수 하기 어려움. - 기능 구분이 명확히 나누어 있지 않기 때문.</li></ul><p>우선 간단히 <strong>Object Literal Pattern</strong>을 사용하여 코드를 좀 더 효율적으로 개선해보겠습니다.</p><h3 id="Object-Literal-Pattern"><a href="#Object-Literal-Pattern" class="headerlink" title="# Object Literal Pattern"></a># Object Literal Pattern</h3><h4 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h4><ul><li>전역 변수 없애기.</li><li>관심사 분리하기.</li><li>DRY Code(Don’t Repeat Yourself) - 반복되는 코드를 사용하지 않기.</li><li>DOM Cache 하기.</li><li>메모리 누수 없애기 - 모든 이벤트는 unbind 될 수 있어야 함.</li></ul><figure class="highlight js"><figcaption><span>playerCount.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> peoepleCount = &#123;&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(peopleCount); <span class="comment">//  Uncaught ReferenceError: playerCount is not defined</span></span><br></pre></td></tr></table></figure><ul><li><strong>IIFE(Immediately Invoked Function Expressions)</strong>를 사용하면 전역변수 오염을 방지할 수 있습니다.</li></ul><figure class="highlight js"><figcaption><span>playerCount.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> playerCount = &#123;</span><br><span class="line">    players: [],</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cacheDom();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheDom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$player = $(<span class="string">'#player'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$count = $(<span class="string">'#count'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$form = <span class="keyword">this</span>.$player.find(<span class="string">'.form'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$input = <span class="keyword">this</span>.$form.find(<span class="string">'input'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$button = <span class="keyword">this</span>.$form.find(<span class="string">'button'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$ul = <span class="keyword">this</span>.$player.find(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$result = <span class="keyword">this</span>.$count.find(<span class="string">'.result'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$radios = <span class="keyword">this</span>.$count.find(<span class="string">'.radios'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$span = <span class="keyword">this</span>.$result.find(<span class="string">'span'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$radioButton = <span class="keyword">this</span>.$radios.find(<span class="string">'input'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$button.on(<span class="string">'click'</span>, <span class="keyword">this</span>.addPlayer.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.$ul.on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="keyword">this</span>.deletePlayer.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.$radioButton.on(<span class="string">'change'</span>, <span class="keyword">this</span>.checkCount.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.checkCount();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  playerCount.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li><code>init</code> - <code>peopleCount</code> 객체를 초기화 시킵니다.</li><li><code>cacheDom</code> - Dom을 캐싱하기 때문에 성능면에서 효율적입니다.</li><li><code>bindEvents</code> - 모든 이벤트는 이 함수안에서 바인드됩니다.</li><li><code>render</code> - count 숫자를 렌더링 해줍니다.</li></ul><p><strong><em>주의) Event handler를 등록할 때 bind(this) 사용해야합니다.</em></strong></p><p>아래 예제 코드를 보시겠습니다.</p><figure class="highlight js"><figcaption><span>playerCount.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> playerCount = &#123;</span><br><span class="line">    players: [],</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cacheDom();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheDom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$player = $(<span class="string">'#player'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$form = <span class="keyword">this</span>.$player.find(<span class="string">'.form'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$button = <span class="keyword">this</span>.$form.find(<span class="string">'button'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$button.on(<span class="string">'click'</span>, <span class="keyword">this</span>.addPlayer);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'redner'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    addPlayer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//  &lt;button type="button"&gt;Add&lt;/button&gt;</span></span><br><span class="line">      <span class="keyword">this</span>.render(); <span class="comment">//  Uncaught TypeError: this.render is not a function</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  playerCount.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>Event handler 안에 <strong>this</strong>는 event target인 button을 가리키고 있기 때문에 <code>addPlayer</code>안에 있는 <strong>this</strong>는 <code>render</code> method를 찾을 수 없습니다.</li><li><strong>this</strong>의 context는 <code>playerCount</code>를 가리켜야합니다.</li></ul><figure class="highlight js"><figcaption><span>playerCount.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> playerCount = &#123;</span><br><span class="line">    players: [],</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.cacheDom();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheDom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$player = $(<span class="string">'#player'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$count = $(<span class="string">'#count'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$form = <span class="keyword">this</span>.$player.find(<span class="string">'.form'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$input = <span class="keyword">this</span>.$form.find(<span class="string">'input'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$button = <span class="keyword">this</span>.$form.find(<span class="string">'button'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$ul = <span class="keyword">this</span>.$player.find(<span class="string">'ul'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$result = <span class="keyword">this</span>.$count.find(<span class="string">'.result'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$radios = <span class="keyword">this</span>.$count.find(<span class="string">'.radios'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$span = <span class="keyword">this</span>.$result.find(<span class="string">'span'</span>);</span><br><span class="line">      <span class="keyword">this</span>.$radioButton = <span class="keyword">this</span>.$radios.find(<span class="string">'input'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$button.on(<span class="string">'click'</span>, <span class="keyword">this</span>.addPlayer.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.$ul.on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="keyword">this</span>.deletePlayer.bind(<span class="keyword">this</span>));</span><br><span class="line">      <span class="keyword">this</span>.$radioButton.on(<span class="string">'change'</span>, <span class="keyword">this</span>.checkCount.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.checkCount();</span><br><span class="line">    &#125;,</span><br><span class="line">    addPlayer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = <span class="keyword">this</span>.$input.val(),</span><br><span class="line">          item = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;button type="button"&gt;Delete&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">          `</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        alert(<span class="string">'Player 이름을 입력해주세요.'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">this</span>.players.push(value);</span><br><span class="line">      <span class="keyword">this</span>.$ul.append(item);</span><br><span class="line">      <span class="keyword">this</span>.$input.val(<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    deletePlayer: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $remove = $(e.target).closest(<span class="string">'li'</span>),</span><br><span class="line">          idx = <span class="keyword">this</span>.$ul.find(<span class="string">'li'</span>).index($remove);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.players.splice(idx, <span class="number">1</span>);</span><br><span class="line">      $remove.remove();</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;,</span><br><span class="line">    checkCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> val = <span class="keyword">this</span>.$radios.find(<span class="string">'input[type=radio]:checked'</span>).val();</span><br><span class="line">      val == <span class="string">'on'</span> ? <span class="keyword">this</span>.$span.text(<span class="keyword">this</span>.players.length) : <span class="keyword">this</span>.$span.text(<span class="string">'?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  playerCount.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>이제 모든 코드가 완성되었고 이전과 동일하게 작동합니다. 자바스크립트 코드만 변경되었습니다.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/c2uk5mfj/embedded/result,js/light" frameborder="0" allowfullscreen></iframe><p>이전 코드보다 가독성이 좋아졌고 유지보수하기 편해졌습니다.<br>하지만 여기서 한 가지 상황을 더 가정해보겠습니다. 기능들이 더 추가될 예정이며 <code>playerCount</code>에 더 많은 속성과 메서드가 추가될 것입니다. 이런 상황들이 반복적으로 이어지다 보면 파일 하나에 너무 많은 기능이 집약되어 있어 지금처럼 한눈에 파악하기가 쉽지 않습니다.<br><strong>Revealing Module Pattern</strong>을 사용하여 <code>player</code>, <code>count</code> 두 객체를 따로 나눠보겠습니다.</p><h3 id="Revealing-Module-Pattern"><a href="#Revealing-Module-Pattern" class="headerlink" title="# Revealing Module Pattern"></a># Revealing Module Pattern</h3><h4 id="Rule-1"><a href="#Rule-1" class="headerlink" title="Rule"></a>Rule</h4><ul><li><strong>IIFE</strong>라 불리는 즉시 호출 함수를 사용함.</li><li>공개해도 지장이 없는 API만 return 시킴.</li><li>나머지는 접근가능하지 않도록 비공개 처리해줌.</li></ul><figure class="highlight js"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> player = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> players = [];</span><br><span class="line"></span><br><span class="line">  _render();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addPlayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addPlayer: addPlayer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(player);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output</span></span><br><span class="line"><span class="comment">render</span></span><br><span class="line"><span class="comment">&#123;addPlayer: ƒ&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>Revealing Module Pattern</strong>의 기본 골격입니다.</li><li><code>players</code> 변수를 공개해버리면 외부에서 조작을 할 수 있기 때문에 비공개로 해놓아야합니다.</li></ul><figure class="highlight js"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> player = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> players = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cache Dom</span></span><br><span class="line">  <span class="keyword">var</span> $player = $(<span class="string">'#player'</span>),</span><br><span class="line">      $form = $player.find(<span class="string">'.form'</span>),</span><br><span class="line">      $input = $form.find(<span class="string">'input'</span>),</span><br><span class="line">      $button = $form.find(<span class="string">'button'</span>),</span><br><span class="line">      $ul = $player.find(<span class="string">'ul'</span>);</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// bind events</span></span><br><span class="line">  $button.on(<span class="string">'click'</span>, addPlayer);</span><br><span class="line">  $ul.on(<span class="string">'click'</span>, <span class="string">'button'</span>, deletePlayer);</span><br><span class="line"></span><br><span class="line">  _render();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count.checkCount(players.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addPlayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = $input.val(),</span><br><span class="line">        item = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;span&gt;<span class="subst">$&#123;value&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;button type="button"&gt;Delete&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;/li&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">      alert(<span class="string">'Player 이름을 입력해주세요.'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    players.push(value);</span><br><span class="line">    $ul.append(item);</span><br><span class="line">    $input.val(<span class="string">''</span>);</span><br><span class="line">    _render();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deletePlayer</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $remove = $(e.target).closest(<span class="string">'li'</span>),</span><br><span class="line">        idx = $ul.find(<span class="string">'li'</span>).index($remove);</span><br><span class="line"></span><br><span class="line">    players.splice(idx, <span class="number">1</span>);</span><br><span class="line">    $remove.remove();</span><br><span class="line">    _render();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addPlayer: addPlayer,</span><br><span class="line">    deletePlayer: deletePlayer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>count.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// cache Dom</span></span><br><span class="line">  <span class="keyword">var</span> $count = $(<span class="string">'#count'</span>),</span><br><span class="line">      $result = $count.find(<span class="string">'.result'</span>),</span><br><span class="line">      $radios = $count.find(<span class="string">'.radios'</span>),</span><br><span class="line">      $span = $result.find(<span class="string">'span'</span>),</span><br><span class="line">      $radioButton = $radios.find(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind event</span></span><br><span class="line">  $radioButton.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    checkCount(number)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkCount</span>(<span class="params">newPlayer</span>) </span>&#123;</span><br><span class="line">    number = newPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value = $radios.find(<span class="string">'input[type=radio]:checked'</span>).val();</span><br><span class="line">    value == <span class="string">'on'</span> ? $span.text(number) : $span.text(<span class="string">'?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    checkCount: checkCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong><em>주의) index.html에 script를 link시킬때 count.js가 player.js보다 위에 있어야됩니다. 그렇지 않으면 Uncaught TypeError: count.checkCount is not a function이라는 에러가 발생합니다.</em></strong></p><p>코드를 분할해 모듈화를 시켜보았습니다. 결과는 이전과 동일합니다.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/xx2hz9pv/embedded/result,js/light" frameborder="0" allowfullscreen></iframe><p>마지막으로 한가지 상황을 더 가정해보겠습니다. 아래 코드를 보고 설명해보겠습니다.</p><figure class="highlight js"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = [];</span><br><span class="line"><span class="comment">// (중략)</span></span><br><span class="line">_render();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count.checkCount(players.length);</span><br><span class="line">    header.showCount(players.length);</span><br><span class="line">    footer.displayCount(players.length);</span><br><span class="line">    sidebar.count(&#123; <span class="attr">count</span>: player.length &#125;);</span><br><span class="line">    <span class="comment">// 이런식으로 반복 ...</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// (중략)</span></span><br></pre></td></tr></table></figure><p>이런식으로 <code>header</code>, <code>footer</code>, <code>sidebar</code> 이런 세개의 화면을 작업하여 모듈화 작업을 했다고 가정해봅시다. 그리고 count를 이 세군데에 보여주어야합니다. 그래서 <code>player</code>코드 객체 안에 함수들을 호출하였습니다. <code>players</code> 배열을 통해 count를 셀 수 있는데 비공개이기 때문에 다른 객체에서 접근할 수가 없습니다. 그렇다고 계속 이런식으로 호출하면 <code>_render</code>함수 안에 너무 많은 함수 리스트가 쌓입니다. 더 좋은 방법이 없을까요?<br>바로 <strong>PubSub Design Pattern</strong>을 사용하여 해결해보겠습니다.</p><h3 id="PubSub-Design-Pattern"><a href="#PubSub-Design-Pattern" class="headerlink" title="# PubSub Design Pattern"></a># PubSub Design Pattern</h3><p><div id="sequence-0"></div><br><strong>PubSub Design Pattern</strong>은 발행(publish)/구독(subscribbe) 모델로 알려져 있으며 어떤 대상의 상태값이 변경되었을 경우 이를 감지하고 있는 구독자들은 이것을 인지하고 자동으로 업데이트 해줍니다. 분산 이벤트 시스템을 구현할 때 널리 사용됩니다.</p><script src="//gist.github.com/d60d8c0612c6f74d17462667c65072a7.js"></script><ul><li><code>subjects</code> - 구독할 이벤트를 저장하는 공간이며 비공개로 처리하였습니다. 비공개 멤버인 이유는 외부에서 조작할 수 없도록 하기 위함입니다.</li><li><code>subscribe</code> - 구독할 이벤트를 <code>subjects</code> 객체에 저장합니다.</li><li><code>unsubscribe</code> - 구독할 이벤트를 <code>subjects</code> 객체에서 삭제합니다.</li><li><code>publish</code> - 저장된 구독이벤트들에게 알림을 보내고 함수를 호출합니다.</li></ul><p>간단히 <strong>PubSub Design Pattern</strong>을 구현해보았습니다.<br>우선 header 하나가 추가된다는 전제하에 코드를 수정해보고 <code>pubsub</code>을 이용하여 구독, 취소, 발행 기능을 추가해보겠습니다.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (중략) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 추가된 부분 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  인원 <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 추가된 부분 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"player"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- (중략) --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> header = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cache Dom</span></span><br><span class="line">  <span class="keyword">var</span> $header = $(<span class="string">'#header'</span>),</span><br><span class="line">      $span = $header.find(<span class="string">'span'</span>);</span><br><span class="line"></span><br><span class="line">  pubsub.subscribe(<span class="string">'changedCount'</span>, showCount);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showCount</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    $span.text(num);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shareData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $span.text();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    shareData: shareData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li><code>shareData</code> - <code>count</code>에서 카운트 값을 공유할 API 입니다.</li></ul><figure class="highlight js"><figcaption><span>count.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// cache Dom</span></span><br><span class="line">  <span class="keyword">var</span> $count = $(<span class="string">'#count'</span>),</span><br><span class="line">      $result = $count.find(<span class="string">'.result'</span>),</span><br><span class="line">      $radios = $count.find(<span class="string">'.radios'</span>),</span><br><span class="line">      $span = $result.find(<span class="string">'span'</span>),</span><br><span class="line">      $radioButton = $radios.find(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind event</span></span><br><span class="line">  pubsub.subscribe(<span class="string">'changedCount'</span>, checkCount);</span><br><span class="line">  </span><br><span class="line">  $radioButton.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = $(e.target).val() == <span class="string">'on'</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      resume();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      destroy();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkCount</span>(<span class="params">newPlayer</span>) </span>&#123;</span><br><span class="line">    number = newPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value = $radios.find(<span class="string">'input[type=radio]:checked'</span>).val();</span><br><span class="line">    value == <span class="string">'on'</span> ? $span.text(number) : $span.text(<span class="string">'?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* pubsub event */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resume</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    number = header.shareData(); </span><br><span class="line">    $span.text(number);</span><br><span class="line">    pubsub.subscribe(<span class="string">'changedCount'</span>, checkCount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    pubsub.unsubscribe(<span class="string">'changedCount'</span>, checkCount);</span><br><span class="line">    $span.text(<span class="string">'?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li><code>pubsub</code>을 이용했기 때문에 굳이 외부로 checkCount를 공개 API롤 설정하지 않아도 됩니다.</li><li>구독취소(<code>unsubscribe</code>)를 하면 다시 구독하게 되었을 때 기존의 있던 값을 노출시키기 때문에 <code>header.shareData()</code> 호출하여 카운트값을 공유합니다.</li></ul><figure class="highlight js"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (중략)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pubsub.publish(<span class="string">'changedCount'</span>, players.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (중략)</span></span><br></pre></td></tr></table></figure><ul><li>발행 기능을 추가함으로써 기존 모듈 하나하나를 추가할 때마다 <code>_render</code> 함수안에서 호출하지 않아도 됩니다. 코드가 훨씬 깔끔해졌습니다.</li></ul><p>각 모듈들을 pubsub.js -&gt; count.js -&gt; header.js -&gt; player.js 순서로 불러와야 오류없이 작동됩니다.<br>제대로 작동하는지 한번 확인해보겠습니다.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/rbr1bgg7/embedded/result,js,html/light" frameborder="0" allowfullscreen></iframe><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>자바스크립트 디자인 패턴을 적용하게 되면은 규모가 큰 어플리케이션에서 좀 더 생산적이고 효율적으로 작업을 할 수 있습니다. 포스팅을 보시고 수정 혹은 잘못된 부분은 댓글 부탁드립니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://stackoverflow.com/questions/30793066/how-to-avoid-memory-leaks-from-jquery" target="_blank" rel="noopener">Stackoverflow - How to avoid memory leaks from jQuery?</a><br><a href="https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c" target="_blank" rel="noopener">Observer vs Pub-Sub pattern</a></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Publisher->Event Channel: Publish Event(발행)Event Channel->Subscriber: Fire Event(발행 알림)Subscriber-->Event Channel: Subscriber(구독 신청)</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt; 라이브러리를 이용하여 화면 개발을 많이 했었지만 &lt;strong&gt;Ja
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
      <category term="Design Pattern" scheme="http://jason0853.github.io/tags/Design-Pattern/"/>
    
      <category term="jQuery" scheme="http://jason0853.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>merge vs rebase</title>
    <link href="http://jason0853.github.io/2018/01/19/merge-vs-rebase/"/>
    <id>http://jason0853.github.io/2018/01/19/merge-vs-rebase/</id>
    <published>2018-01-19T07:52:11.000Z</published>
    <updated>2019-05-18T06:10:55.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/git/git-logo.png" alt=""></p><p>프로젝트 결과물도 중요하지만 작업 과정을 기록하는 일 또한 협업 업무에 있어서 중요하다고 생각합니다. 그래서 히스토리를 어떻게 정리할 것인가에 대해서 다뤄볼 예정입니다. 보통은 각 기능마다 브랜치를 생성해서 작업이 끝난 뒤 다른 브랜치로 병합하는 과정을 진행합니다. 이렇게 병합을 진행하는데 있어서 git에는 <strong>merge</strong>와 <strong>rebase</strong>가 있습니다. 이 두 차이를 알아보고 어떤 상황에서 써야되는지 알아봅시다.</p><p><img src="../../../../images/git/git-merge-vs-rebase-01.png" alt=""></p><p>현재 위 상황처럼 <em>test</em>브랜치와 <em>master</em>브랜치가 엇갈리게 만들어놓고 병합을 한번 진행해보겠습니다.</p><h3 id="Merge"><a href="#Merge" class="headerlink" title="# Merge"></a># Merge</h3><p><img src="../../../../images/git/git-merge-vs-rebase-02.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge <span class="string">'branch name'</span></span></span><br></pre></td></tr></table></figure><ul><li>master 브랜치에서 <code>git merge test</code>한 커밋 로그입니다.</li><li>로그에서 보듯이 병렬로 작업된 구조가 그대로 보존되면서 <em>Merge branch ‘test’</em>라는 새로운 커밋 로그가 맨 위에 있습니다. 작업한 과정을 고스란히 보여줍니다.</li><li>두 브랜치의 최종결과만을 가지고 합칩니다.</li></ul><p>이제 다시 <strong>merge</strong> 전으로 돌린 이후 이전과 똑같은 상황에서 <strong>rebase</strong> 작업을 진행해보겠습니다.</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="# Rebase"></a># Rebase</h3><p><img src="../../../../images/git/git-merge-vs-rebase-03.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rebase <span class="string">'branch name'</span></span></span><br></pre></td></tr></table></figure><ul><li>왼쪽 터밀널은 test 브랜치에서 <code>git rebase master</code>를 한 커밋로그이며 오른쪽 터미널은 <strong>rebase</strong> 작업이 끝난 뒤 master 브랜치에서 <code>git merge test</code>를 한 커밋로그입니다.</li><li>로그를 살펴보면 <strong>merge</strong>한 로그와 달리 히스토리가 선형으로 보기 좋게 나옵니다. </li><li><strong>rebase</strong>는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합칩니다.</li></ul><p>지금까지는 각 브랜치에서 다른 파일을 작업했기 때문에 충돌이 나지 않고 auto-merging이 잘 되었습니다.<br>이번에는 충돌 상황을 고의로 만든 이후에 <strong>rebase</strong> 작업을 해나가며 충돌을 해결하는 작업을 진행해보겠습니다.</p><p><img src="../../../../images/git/git-merge-vs-rebase-04.png" alt=""></p><p>파일 하나만을 가지고 브랜치를 바꿔가며 작업하여 로그를 보여준 모습입니다.</p><p><img src="../../../../images/git/git-merge-vs-rebase-05.png" alt=""></p><p>test 브랜치에서 <strong>rebase</strong> 작업을 하였습니다.<br>하지만 <em>CONFLICT(content): Merge conflict in index.html</em>라는 메세지가 보입니다.<br>충돌을 해결해줍시다.</p><p><img src="../../../../images/git/git-merge-vs-rebase-06.png" alt=""></p><p>충돌을 해결한 뒤 파일을 staging area로 옮깁니다. git 상태 체크를 다시 해봅니다.<br><em>all conflicts fixed: run “git rebase –continue”</em>라는 메세지가 보입니다.<br>충돌이 더 이상 없으면 Auto-merging 작업이 충돌없이 잘 진행됩니다.</p><p><img src="../../../../images/git/git-merge-vs-rebase-07.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add <span class="string">'file name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase --<span class="built_in">continue</span></span></span><br></pre></td></tr></table></figure><ul><li><em>mark resolution</em>은 충돌을 해결했으면 git에게 알려주어야 다음 <strong>rebase</strong> 작업을 진행할 수 있습니다.<br>ex) <code>git add index.html</code></li><li><code>continue</code> 옵션과 <strong>rebase</strong> 작업을 하면 기존 작업을 이어서 작업해줍니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>개인적으로는 로컬 브랜치에서 병합을 진행할 때 히스토리를 깔끔하게 보기 위해서 <strong>rebase</strong>를 즐겨쓰는 편이기는 하지만 <strong>merge</strong> 작업 또한 히스토리를 변경하지 않고 로그가 남기 때문에 프로젝트 회고 시간을 가질 때 좋은 것 같습니다. 각각 장단점이 있기 때문에 어떤 것이 우월하다고 말하기 곤란하며 각자의 상황과 판단에 맞춰서 쓰시길 추천합니다. </p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">Git documentation - Rebase 하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/git/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;프로젝트 결과물도 중요하지만 작업 과정을 기록하는 일 또한 협업 업무에 있어서 중요하다고 생각합니다. 그래서 히스토리를 어떻게 정리할 
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Git" scheme="http://jason0853.github.io/categories/Ops/Git/"/>
    
    
      <category term="git" scheme="http://jason0853.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>fetch vs pull</title>
    <link href="http://jason0853.github.io/2018/01/16/fetch-vs-pull/"/>
    <id>http://jason0853.github.io/2018/01/16/fetch-vs-pull/</id>
    <published>2018-01-16T04:27:40.000Z</published>
    <updated>2019-05-18T06:10:55.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/git/git-logo.png" alt=""></p><p>회사에서 Git 작업을 하면서 원격저장소로부터 소스를 동기화시키기 위해서 항상 <strong>pull</strong>을 사용했었는데 <strong>fetch</strong>라는 기능도 있다는 것을 팀원을 통해 알게 되었습니다. 그럼 이 둘의 미묘한 차이를 한 번 다뤄보겠습니다.</p><div id="sequence-0"></div><p><img src="../../../../images/git/git-fetch-vs-pull-01.png" alt=""></p><p><img src="../../../../images/git/git-fetch-vs-pull-02.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure><ul><li><code>git fetch</code> - 원격저장소로부터 소스를 로컬저장소로 가져오지만 merge 작업을 하지 않습니다.</li><li><code>git pull</code> - 원격저장소로부터 소스를 로컬저장소로 가져와서 working directory에 있는 소스와 함께 merge 작업을 진행합니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge <span class="string">'remote branch`</span></span></span><br></pre></td></tr></table></figure><ul><li><code>git fetch</code>를 한 이후 소스를 working directory와 병합하고 싶으면 merge 작업을 진행해줍니다.<br>ex) <code>git merge origin/master</code></li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>결국 <code>git pull</code> = <code>git fetch</code> + <code>git merge</code>를 합한 결과라고 보면 될 것 같습니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98" target="_blank" rel="noopener">Git documentation - 리모트 브랜치</a></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">working directory->staging area: git addstaging area->local repo: git commitlocal repo->remote repo: git pushremote repo-->local repo: git fetchremote repo-->working directory: git pull</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/git/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;회사에서 Git 작업을 하면서 원격저장소로부터 소스를 동기화시키기 위해서 항상 &lt;strong&gt;pull&lt;/strong&gt;을 사용했었는데 &lt;
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Git" scheme="http://jason0853.github.io/categories/Ops/Git/"/>
    
    
      <category term="git" scheme="http://jason0853.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Useful features on Git</title>
    <link href="http://jason0853.github.io/2018/01/15/Useful-features-on-Git/"/>
    <id>http://jason0853.github.io/2018/01/15/Useful-features-on-Git/</id>
    <published>2018-01-15T06:56:46.000Z</published>
    <updated>2019-05-18T06:10:55.388Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/git/git-logo.png" alt=""></p><p>이번 포스팅은 Git을 사용하면서 필자가 자주 사용하는 유용한 기능들에 대해서 살펴보겠습니다.</p><h3 id="Stash"><a href="#Stash" class="headerlink" title="# Stash"></a># Stash</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash save <span class="string">'stash message'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@&#123;index&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash drop stash@&#123;index&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash clear</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br></pre></td></tr></table></figure><ul><li><code>git stash</code> 특징<ol><li><strong>unstaged files</strong>들은 백업해두면서 <em>working directory</em>는 최신 커밋상태로 돌아갑니다.</li><li><strong>untracked files</strong>들은 백업되지 않습니다.</li><li>브랜치를 변경해도 stash는 공유됩니다.</li></ol></li><li><code>pop</code>은 <code>apply</code>와 달리 적용되면서 stash에서 제거됩니다.</li><li>주로 커밋작업할 준비가 아직 되어 있지 않을때 <code>stash</code>를 이용하여 백업해둡니다.</li></ul><h3 id="Cherry-pick"><a href="#Cherry-pick" class="headerlink" title="# Cherry-pick"></a># Cherry-pick</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick <span class="string">'hash'</span></span></span><br></pre></td></tr></table></figure><ul><li>다른 브랜치의 커밋 내역을 다 복사해오지 않고 <strong>특정 커밋</strong>만 가져오고 싶은 경우 사용됩니다.</li></ul><h3 id="Tag"><a href="#Tag" class="headerlink" title="# Tag"></a># Tag</h3><p>Git 태그는 <strong>Lightweight tag</strong>와 <strong>Annotated tag</strong>로 분류되어 있습니다.</p><p><img src="../../../../images/git/git-useful-features-on-git-01.png" alt=""></p><p><img src="../../../../images/git/git-useful-features-on-git-02.png" alt=""></p><p><img src="../../../../images/git/git-useful-features-on-git-03.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag <span class="string">'tag name'</span> <span class="string">'hash or branch name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d <span class="string">'tag name'</span></span></span><br></pre></td></tr></table></figure><ul><li>태그 이외에 다른 정보를 저장할 필요가 없다면 위와 같이 아무 옵션 없이 명령어를 실행시키면 됩니다. 위와 같은 방법을 <strong>Lightweight tag</strong>라 부릅니다.</li><li>태그를 이용하여 <code>git checkout ‘tag name’</code>을 이용하면 태그가 위치한 커밋 소스로 이동합니다. </li></ul><p><img src="../../../../images/git/git-useful-features-on-git-04.png" alt=""></p><p><img src="../../../../images/git/git-useful-features-on-git-05.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a <span class="string">'tag name'</span> -m <span class="string">'tag message'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -v <span class="string">'tag name'</span></span></span><br></pre></td></tr></table></figure><ul><li><code>a</code>옵션은 annotated의 약자로 <strong>Annotated tag</strong>를 지정하는 것입니다. </li><li><code>git tag -v</code> - 위 그림의 빨강 박스에서 확인할 수 있듯이 태그를 생성한 사람의 username, email, date, tag message가 보여집니다.</li></ul><p><img src="../../../../images/git/git-useful-features-on-git-06.png" alt=""></p><p><img src="../../../../images/git/git-useful-features-on-git-07.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --tags</span></span><br></pre></td></tr></table></figure><ul><li>tag를 원격저장소에도 반영하기 위해서는 <code>tags</code>옵션과 함께 푸쉬 작업을 해줍니다.</li><li>소프트웨어 버전을 작성할 때 어떤 기준으로 해서 작성을 할 것인가에 대해 고민하신다면 이 <a href="https://semver.org/" target="_blank" rel="noopener">사이트</a>를 참고바랍니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>Git 작업을 하면서 <strong>stash</strong>, <strong>cherry-pick</strong>, <strong>tag</strong>를 상황에 맞게 적절히 이용하면서 사용하시길 바랍니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://git-scm.com/book/ko/v1/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%ED%83%9C%EA%B7%B8" target="_blank" rel="noopener">Git documentation - 태그</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/git/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 포스팅은 Git을 사용하면서 필자가 자주 사용하는 유용한 기능들에 대해서 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;Stash&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Git" scheme="http://jason0853.github.io/categories/Ops/Git/"/>
    
    
      <category term="git" scheme="http://jason0853.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>OOP &amp; Inheritance</title>
    <link href="http://jason0853.github.io/2018/01/10/OOP-Inheritance/"/>
    <id>http://jason0853.github.io/2018/01/10/OOP-Inheritance/</id>
    <published>2018-01-10T14:02:11.000Z</published>
    <updated>2019-05-18T06:10:55.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p><strong>OOP</strong>란 <em>Object-oriented programming</em>(객체지향 프로그래밍)이라고 불리며 대규모 어플리케이션을 제작할 때 보다 유연하고 유지보수하기 높은 프로그래밍 패턴입니다. 각각의 기능을 모듈화를 함으로써 코드 재사용할 수 있는 특징과 객체의 독립성을 유지시켜줍니다. 모듈을 재활용함으로써 하드웨어 처리량을 획기적으로 줄일 수 있습니다. </p><p>자바스크립트에서 <strong>OOP</strong>를 구현하기 위해 두 가지 <strong>Inheritance</strong>(상속) 방법에 대해서 알아보겠습니다.</p><h3 id="Classical-Inheritance"><a href="#Classical-Inheritance" class="headerlink" title="# Classical Inheritance"></a># Classical Inheritance</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Human = <span class="function"><span class="keyword">function</span>(<span class="params">firstname, lastname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._firstname = firstname;</span><br><span class="line">  <span class="keyword">this</span>._lastname = lastname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Human.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello, I'm <span class="subst">$&#123;<span class="keyword">this</span>._firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>._lastname&#125;</span>.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Player = <span class="function"><span class="keyword">function</span>(<span class="params">firstname, lastname, sport</span>) </span>&#123;</span><br><span class="line">  Human.call(<span class="keyword">this</span>, firstname, lastname);</span><br><span class="line">  <span class="keyword">this</span>._sport = sport;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype = <span class="built_in">Object</span>.create(Human.prototype);</span><br><span class="line">Player.prototype.constructor = Player;</span><br><span class="line"></span><br><span class="line">Player.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Nice to meet you, I'm <span class="subst">$&#123;<span class="keyword">this</span>._firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>._lastname&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype.play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`I play <span class="subst">$&#123;<span class="keyword">this</span>._sport&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Guard = <span class="function"><span class="keyword">function</span>(<span class="params">firstname, lastname, sport, skill</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [...arguments].slice(0, 3)</span></span><br><span class="line"><span class="comment">   * output: [firstname, lastname, sport]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Player.apply(<span class="keyword">this</span>, [...arguments].slice(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">  <span class="keyword">this</span>._skill = skill;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Guard.prototype = <span class="built_in">Object</span>.create(Player.prototype);</span><br><span class="line">Guard.prototype.constructor = Guard;</span><br><span class="line"></span><br><span class="line">Guard.prototype.showoff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`I'm good at <span class="subst">$&#123;<span class="keyword">this</span>._skill&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kyrie = <span class="keyword">new</span> Guard(<span class="string">'Kyrie'</span>, <span class="string">'Irving'</span>, <span class="string">'basketball'</span>, <span class="string">'dribble'</span>);</span><br><span class="line"></span><br><span class="line">kyrie.greet();  <span class="comment">// Hello, I'm Kyrie Irving.</span></span><br><span class="line">kyrie.play();  <span class="comment">// I play basketball.</span></span><br><span class="line">kyrie.showoff();  <span class="comment">// I play</span></span><br></pre></td></tr></table></figure><p><img src="../../../../images/javascript/oop-inheritance-01.png" alt=""></p><ul><li>생성자함수를 정의할 때 함수선언식이 아닌 익명함수로 정의하였습니다.<br><strong><em>함수선언식 같은 경우 자바스크립트 인터프리터가 스크립트가 로딩되는 시점에 바로 초기화하고 VO(Variable Object)에 저장되기 때문에 위치와 상관없이 호출됩니다. 그렇기 때문에 VO에 함수선언식이 많으면 VO에 저장되는 코드가 많게 되어 어플리케이션 응답속도를 저하시킵니다. 하지만 익명함수는 VO에 저장되지 않고  runtime시에 실행됩니다.</em></strong></li><li><code>call</code>과 <code>apply</code> 함수를 이용하여 현재 생성자 <em>context</em>로 바인딩합니다.</li><li><code>Object.create()</code>을 이용하지 않고 <em>prototype</em>을 그대로 상속하였을 경우 <code>prototype</code>에 추가한 <code>greet</code>함수도 같이 업데이트 되기 때문에 값이 변경되버립니다.</li><li><code>constructor</code> 설정은 필수는 아니지만 내부적으로 설정되지 않는 부분들을 수정해주는 습관을 주는 것이 도움이 됩니다.</li></ul><h3 id="Prototypal-Pattern"><a href="#Prototypal-Pattern" class="headerlink" title="# Prototypal Pattern"></a># Prototypal Pattern</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> employee = &#123;</span><br><span class="line">  company: <span class="string">'Facebook'</span>,</span><br><span class="line">  work: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I work for <span class="subst">$&#123;<span class="keyword">this</span>.company&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  master: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.skill);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> webEngineer = <span class="built_in">Object</span>.create(employee);</span><br><span class="line">webEngineer.skill = <span class="string">'HTML, CSS, Javascript'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> frontendEngineer = <span class="built_in">Object</span>.create(webEngineer);</span><br><span class="line">frontendEngineer.skill = <span class="string">'React, Redux, React-Native'</span>;</span><br><span class="line">frontendEngineer.master = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Mastered <span class="subst">$&#123;<span class="keyword">this</span>.skill&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>기본적으로 <strong>Prototypal Pattern</strong> 은 모든 것이 객체입니다. <em>object literal</em>로 시작한 다음 객체를 상속을 하려면 <code>Object.create()</code>을 사용합니다. <strong>Classical Inheritance</strong>보다 상속을 구현하기가 더 쉬우며 직관적입니다.</li><li><code>Object.create()</code>는 <em>ECMASCRIPT5</em> 스펙으로 하위브라우저(IE8이하)는 지원하지 않습니다.</li></ul><p>아래코드는 위코드랑 동일하며 좀 더 보안된 코드입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> employee = &#123;</span><br><span class="line">  company: <span class="string">'Facebook'</span>,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="built_in">Object</span>.create(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">Object</span>.keys(values).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      instance[key] = values[key];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;,</span><br><span class="line">  work: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I work for <span class="subst">$&#123;<span class="keyword">this</span>.company&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  master: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.skill);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> webEngineer = employee.create(&#123; <span class="attr">skill</span>: <span class="string">'html, css, javascript'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> frontendEngineer = webEngineer.create(&#123; </span><br><span class="line">  skill: <span class="string">'React, Redux, React-Native'</span>, </span><br><span class="line">  master: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Mastered <span class="subst">$&#123;<span class="keyword">this</span>.skill&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>create</code> 메서드를 추가함으로써 상속한 다음에 굳이 따로 <em>property</em>를 추가하지 않아도 됩니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>객체지향 프로그래밍을 하기에 앞서 자바스크립트 프로토타입 기반 상속 모델을 이해하는 것이 중요합니다. 또한 프로토타입 체인의 걸친 속성 검색으로 인해 성능상에 이슈가 생길 수 있으니 유의하시기 바랍니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="noopener">Mozilla - 객체지향 자바스크립트 소개</a><br><a href="https://stackoverflow.com/questions/8453887/why-is-it-necessary-to-set-the-prototype-constructor" target="_blank" rel="noopener">StackOverflow - Why is it necessary to set the prototype constructor?</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Mozilla - Object.create()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OOP&lt;/strong&gt;란 &lt;em&gt;Object-oriented programming&lt;/em&gt;(객체
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Object creation</title>
    <link href="http://jason0853.github.io/2018/01/09/Object-creation/"/>
    <id>http://jason0853.github.io/2018/01/09/Object-creation/</id>
    <published>2018-01-09T13:45:26.000Z</published>
    <updated>2019-05-18T06:10:55.386Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/javascript/javascript-logo.png" alt=""></p><p>최근 <strong>Javascript</strong>를 기초부터 다시 공부하고 있는 와중에 블로그에도 문서화 시키면 좋을 것 같아서 공부한 내용을 정리해보기로 했습니다. 이 포스팅을 보시면서 오타가 있거나 잘못된 내용이 있다면 댓글 부탁드립니다.</p><h3 id="bind-and-this"><a href="#bind-and-this" class="headerlink" title="# bind and this"></a># bind and this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = &#123;</span><br><span class="line">  sport: <span class="string">'basketball'</span>,</span><br><span class="line">  play: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sport);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">player.play();  <span class="comment">// basketball</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playFunction = player.play;</span><br><span class="line">playFunction();  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li><em>undefined</em>가 로그에 찍히는 이유는 <code>this</code> 키워드를 통해 <strong>context</strong>에 접근할 수 있는데 <code>playFunction</code>은 단순히 함수입니다. 10번째 줄 코드는 아래코드와 동일합니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> playFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sport);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이제 <code>bind</code>함수를 이용하여 <code>this</code>가 가리키고 있는 <strong>context</strong>를 변경해보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = &#123;</span><br><span class="line">  sport: <span class="string">'basketball'</span>,</span><br><span class="line">  play: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sport);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">player.play();  <span class="comment">// basketball</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playFunction = player.play;</span><br><span class="line"><span class="keyword">let</span> playFunctionBound = playFunction.bind(player);</span><br><span class="line">playFunctionBound();  <span class="comment">// basketball</span></span><br></pre></td></tr></table></figure><ul><li><code>bind()</code>의 파라미터에 참조해야할 객체인 <code>player</code>를 인자로 전달해주어 <code>this</code>는 속성에 접근할 수 있게 됩니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sport);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> player = &#123;</span><br><span class="line">  sport: <span class="string">'basketball'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playBound = play.bind(player);</span><br><span class="line">playBound();  <span class="comment">// basketball</span></span><br></pre></td></tr></table></figure><ul><li>이번에는 함수를 <code>player</code> 객체로부터 분리해놓고 설명해보겠습니다. <code>bind</code> 함수를 사용하기 이전에 코드를 살펴보면은 <code>play</code> 함수 안에 있는 <code>this</code>는 <strong>window</strong> 객체(웹 브라우저) 혹은 <strong>global</strong> 전역 객체(node.js)를 가리킵니다. 그렇기 때문에 <code>this</code>가 <code>player</code> 객체를 바라보도록 컨텍스트를 변경해야합니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sport);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> player = &#123;</span><br><span class="line">  <span class="keyword">do</span>: play,</span><br><span class="line">  sport: <span class="string">'basketball'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherPlayer = &#123;</span><br><span class="line">  swim: player.do,</span><br><span class="line">  sport: <span class="string">'swimming'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">player.do();  <span class="comment">// basketball</span></span><br><span class="line">anotherPlayer.swim();  <span class="comment">// swimming</span></span><br></pre></td></tr></table></figure><ul><li><code>anotherPlayer</code> 객체 하나를 더 생성해 보았습니다. 각 객체의 <code>do</code>, <code>swim</code> 속성에 <code>play</code> 함수가 복사되면서 <code>this</code>가 가리키는 컨텍스트는 각 객체 자신입니다.</li></ul><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/frdy6twg/embedded/js,html,result/light" frameborder="0" allowfullscreen></iframe><ul><li>만약 <code>bind()</code> 함수를 사용하지 않는다면 <code>this</code>가 가리키는 객체는 button 태그를 가리킵니다.</li></ul><h3 id="Prototype-basic"><a href="#Prototype-basic" class="headerlink" title="# Prototype basic"></a># Prototype basic</h3><p>보통 상속을 할때 클래스를 사용하는데 익숙합니다. 하지만 자바스크립트는 <strong>프로토타입(prototype)</strong>을 사용하여 상속을 구현합니다. <code>Object.setPrototypeOf(obj, prototype);</code> 를 이용하여 프로토타입을 설정해보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.greet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  say  <span class="comment">// === say: say 와 동일합니다. es6 syntax</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  greet: <span class="string">'Hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> soldier = &#123;</span><br><span class="line">  greet: <span class="string">'Hello, sir'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strongSoldier = &#123;</span><br><span class="line">  shout: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.greet.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(student, person);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(soldier, person);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(strongSoldier, soldier);</span><br><span class="line"></span><br><span class="line">student.say();  <span class="comment">// Hello</span></span><br><span class="line">soldier.say();  <span class="comment">// Hello, sir</span></span><br><span class="line">strongSoldier.shout();  <span class="comment">// HELLO, SIR</span></span><br></pre></td></tr></table></figure><ul><li><code>student</code>, <code>soldier</code>객체는 프로토타입을 설정할 객체이며 <code>person</code>객체가 가지고 있는 <code>say</code>함수는 공통 메서드로 사용할 것이기 때문에 새로운 객체의 프로토타입으로 설정하였습니다.</li><li><code>strongSoldier</code> 객체에 프로토타입을 설정해주지 않으면 <code>shout</code> 함수안에 있는 <code>this</code>는 <code>greet</code>이라는 속성을 가지고 있지 않기 때문에 에러가 발생하게 됩니다.</li></ul><h3 id="The-‘new’-keyword"><a href="#The-‘new’-keyword" class="headerlink" title="# The ‘new’ keyword"></a># The ‘new’ keyword</h3><p>자바스크립트에서 <strong>new</strong> 키워드가 함수에 적용되었을 때 어떻게 작동되는지 살펴보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.introduce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'My name is '</span> + <span class="keyword">this</span>.name + <span class="string">'. I\'m '</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 키워드의 역할</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">ctor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 빈 Object 생성</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. prototype 설정</span></span><br><span class="line">  <span class="built_in">Object</span>.setPrototypeOf(obj, ctor.prototype);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. this 키워드는 생성자 함수를 가리키도록 설정</span></span><br><span class="line">  ctor.apply(obj, [...arguments].slice(<span class="number">1</span>)); <span class="comment">// ... 전개연산자(spread operator) es6 syntax</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 가공된 object 리턴</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jason = create(Person, <span class="string">'Jason'</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">let</span> jane = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">jason.introduce();  <span class="comment">// My name is Jason I'm 32</span></span><br><span class="line">jane.introduce();  <span class="comment">// My name is Jane I'm 32</span></span><br></pre></td></tr></table></figure><ul><li><strong>new</strong>의 역할 : <code>create</code>함수와 동일<ol><li>빈 <em>object</em>를 생성합니다.</li><li><em>prototype</em>을 설정해줍니다.</li><li><em>this</em> 키워드가 constructor 함수를 가리키도록 합니다.</li><li>생성한 <em>object</em>를 return 해줍니다.</li></ol></li><li><code>arguments</code> 객체는 <em>Array</em>가 아니기 때문에 배열 행태로 변경해줘야합니다. <code>[…arguments]</code> es6 문법을 이용하여 배열형태로 변경하였습니다. <code>[…arguments] instanceof Array</code>를 로그에 출력해보면 <code>true</code>를 반환합니다.</li><li><code>slice</code>메서드를 사용한 이유는 <code>Person</code>을 제외한 나머지 인자값들을 리턴해주어야하기 때문입니다.</li></ul><h3 id="proto-vs-prototype"><a href="#proto-vs-prototype" class="headerlink" title="# __proto__ vs prototype"></a># <strong>__</strong>proto<strong>__</strong> vs prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = &#123;</span><br><span class="line">  door: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sportCar = &#123;</span><br><span class="line">  boost: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(car, sportCar);</span><br><span class="line"></span><br><span class="line">car.__proto__.name = <span class="string">'Ferrari'</span>;</span><br><span class="line"></span><br><span class="line">car.__proto__;  <span class="comment">// &#123; boost: true, name: "Ferrari" &#125;</span></span><br><span class="line">car.prototype;  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>프로토타입을 설정할 객체 - <code>car</code></li><li>객체의 새로운 프로토타입 - <code>sportCar</code></li><li><strong><strong>__</strong>proto<strong>__</strong></strong> 속성은 현재 객체가 프로토타입 체인에서 조회를 수행할 때 실제로 사용할 객체를 가리킵니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">student.say;  <span class="comment">// Hello</span></span><br><span class="line">student.__proto__;  <span class="comment">// &#123; say: "Hello", constructor: ƒ &#125;</span></span><br><span class="line">student.__proto__ === Person.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>prototype</strong>은 함수에만 존재하며 해당 객체를 생성자로 사용하려는 경우에 사용됩니다.</li></ul><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="# Object.create()"></a># Object.create()</h3><p><code>Object.create()</code> 메서드는 새로운 객체와 함께 지정된 프로토타입 객체와 속성을 갖습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sound);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sam = <span class="built_in">Object</span>.create(dog);</span><br><span class="line">sam.sound = <span class="string">'bow-wow'</span>.toUpperCase();</span><br><span class="line">sam.bark();  <span class="comment">// BOW-WOW</span></span><br><span class="line">dog.isPrototypeOf(sam);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>dog</code>객체가 <code>const</code>(상수)로 설정되어 있지만 객체의 속성은 언제든지 변경 및 추가할 수 있습니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params">sound</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sound = sound;</span><br><span class="line">  &#125;,</span><br><span class="line">  bark: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sound);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sam = <span class="built_in">Object</span>.create(dog);</span><br><span class="line">sam.init(<span class="string">'bow-wow'</span>.toUpperCase());</span><br><span class="line">sam.bark(); <span class="comment">// BOW-WOW</span></span><br><span class="line">dog.isPrototypeOf(sam);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>init</code>함수는 생성자 함수와 같습니다.</li></ul><h3 id="class-keyword"><a href="#class-keyword" class="headerlink" title="# class keyword"></a># class keyword</h3><p><code>class</code> 키워드는 <strong>ECMASCRIPT6</strong>에 추가된 기능이며 앞서 배웠던 <strong>prototype</strong>기반의 상속보다 좀 더 직관적이고 명료하게 사용할 수 있습니다. 하지만 저희가 일반적으로 알고 있는 자바의 클래스처럼 새로운 객체지향 상속 모델은 아닙니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>`</span>;  <span class="comment">// `$&#123;&#125;` Template literal - es6 문법</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Human(<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Teacher(<span class="string">'John'</span>);</span><br><span class="line"></span><br><span class="line">tom.hello(<span class="string">'Tom'</span>);  <span class="comment">// Tom</span></span><br><span class="line">john.hello(<span class="string">'John'</span>);  <span class="comment">// John</span></span><br></pre></td></tr></table></figure><ul><li><strong>constructor</strong> - 객체를 생성하고 초기화하기 위한 특수한 메서드이며 <strong>class</strong>내에서 오직 한번만 사용할 수 있습니다.</li><li><strong>super</strong> - 부모 클래스의 <strong>constructor</strong>를 호출하기 위해 사용됩니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>자바스크립트 객체에 대해 한번 정리하고 나니 기존에 이해가 가지 않았거나 놓친 부분들이 보완된 느낌입니다. 포스팅에 대한 질문이나 잘못된 내용이 있다면 댓글로 피드백 바랍니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/" target="_blank" rel="noopener">Mozilla - Object</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noopener">Mozilla - Object.setPrototypeOf()</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Mozilla - Object.create()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/javascript/javascript-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근 &lt;strong&gt;Javascript&lt;/strong&gt;를 기초부터 다시 공부하고 있는 와중에 블로그에도 문서화
      
    
    </summary>
    
      <category term="Front-end" scheme="http://jason0853.github.io/categories/Front-end/"/>
    
      <category term="Javascript" scheme="http://jason0853.github.io/categories/Front-end/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jason0853.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Fixing common mistakes</title>
    <link href="http://jason0853.github.io/2018/01/04/Fixing-common-mistakes/"/>
    <id>http://jason0853.github.io/2018/01/04/Fixing-common-mistakes/</id>
    <published>2018-01-04T07:25:06.000Z</published>
    <updated>2019-05-18T06:10:55.386Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/git/git-logo.png" alt=""></p><p>이번 포스팅은 git을 하면서 사소한 실수를 했을때 대처하는 방법에 대해서 정리해보겠습니다.<br>우선 git 연습을 하기 위한 빈 디렉토리와 파일을 만들고 커밋을 진행해주세요.<br>혹시 git을 처음 사용하시는 분들은 지난번 <a href="https://jason0853.github.io/2017/12/16/Git-basic/">포스팅</a>을 참고해주시기 바랍니다.</p><h3 id="Restore-code"><a href="#Restore-code" class="headerlink" title="# Restore code"></a># Restore code</h3><p><img src="../../../../images/git/git-fixing-common-mistakes-01.png" alt=""></p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    지워야 될 텍스트</span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout <span class="string">'filename'</span></span></span><br></pre></td></tr></table></figure><ul><li><code>git diff</code> 명령어는 파일의 변경된 코드를 확인할 수 있습니다. 터미널 캡처 오른쪽을 확인해보면 새로 추가된 코드는 녹색으로 표시되어 나옵니다.</li><li><code>git checkout index.html</code>을 실행시키면 변경되기 전의 코드로 돌아갑니다.</li></ul><h3 id="Change-a-commit-message"><a href="#Change-a-commit-message" class="headerlink" title="# Change a commit message"></a># Change a commit message</h3><p><img src="../../../../images/git/git-fixing-common-mistakes-02.png" alt=""></p><p><img src="../../../../images/git/git-fixing-common-mistakes-03.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m <span class="string">'message'</span></span></span><br></pre></td></tr></table></figure><ul><li>커밋 메세지에 오타를 수정하고 싶거나 변경하고 싶은 경우 다른 커밋 작업을 진행하기 직전에 바로 <code>amend</code>옵션과 함께 명령어를 실행시키면 메세지가 수정됩니다.</li></ul><h3 id="Reset"><a href="#Reset" class="headerlink" title="# Reset"></a># Reset</h3><div id="sequence-0"></div><p><img src="../../../../images/git/git-fixing-common-mistakes-04.png" alt=""></p><p><img src="../../../../images/git/git-fixing-common-mistakes-05.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --soft <span class="string">'hash'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --mixed <span class="string">'hash'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard <span class="string">'hash'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git clean -df</span></span><br></pre></td></tr></table></figure><ul><li>커밋로그 보시면 unique 값들이 나열되어 있는데 이것을 <strong>hash(해쉬)</strong>라고 부릅니다. <code>git reset</code> 명령어를 사용할 때 hash[약7~8자 정도 copy and paste]를 통하여 원하는 커밋 로그 상태로 돌아갈 수 있습니다.</li><li><code>soft</code> 옵션을 통하여 staging area로 돌아갑니다.</li><li><code>mixed</code> 옵션은 working directory로 돌아갑니다.<br><strong><em>주의해서 봐야할 점은 index.html 파일은 이미 이전에 커밋을 했던 파일이며 script.js 파일은 새로 만들어져서 untracked files로 분류되어 있습니다.</em></strong></li><li><code>hard</code> 옵션은 변경된 코드는 제거되고 이전 커밋에 저장해놓았던 코드 상태로 되돌아갑니다.<br><strong><em>대신 untracked files로 분류된 파일들은 영향을 받지 않습니다.</em></strong></li><li><code>git clean -df</code> - undrecked file들을 삭제해줍니다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD~1</span></span><br></pre></td></tr></table></figure><ul><li>최신 커밋 로그 메세지를 지우고 싶은 경우 <code>HEAD~1</code>을 추가하면 됩니다.<br>ex)예를 들어 최신 커밋 로그 2개를 지우고 싶은 경우는 <code>HEAD~2</code>을 추가하면 됩니다.</li><li>만약 원격저장소에 저장되어 있는 커밋 로그까지 삭제하고 싶다면 <code>git push origin HEAD –force</code> 명령어를 실행하시면 됩니다.</li></ul><h3 id="Revert"><a href="#Revert" class="headerlink" title="# Revert"></a># Revert</h3><p><img src="../../../../images/git/git-fixing-common-mistakes-06.png" alt=""></p><p><img src="../../../../images/git/git-fixing-common-mistakes-07.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git revert <span class="string">'hash'</span>...<span class="string">'hash'</span></span></span><br></pre></td></tr></table></figure><ul><li>이미 <code>push</code>까지 작업한 커밋을 되돌리고 싶을때는 <code>revert</code>를 사용합니다.<br><strong><em><code>revert</code>작업할 때 최신 커밋 로그부터 차례대로 작업하는 것을 권고드립니다. conflict를 최소화하기 위해서입니다.</em></strong></li><li>하나의 커밋만 <code>revert</code>하고 싶은 경우는 <code>git revert ‘hash’</code>를 하시면 됩니다.</li><li>여러 커밋을 하고 싶은 경우는 <code>‘hash’…’hash’</code> 되돌아가고 싶은 커밋 시점부터 마지막 커밋 시점까지를 뜻합니다.</li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>여기까지 Git을 사용하며 실수에 대처하는 방법에 대해서 알아보았습니다. 많은 도움이 되시길 바랍니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git" target="_blank" rel="noopener">StackOverflow - Delete commits from a branch in Git</a><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">local repo-->staging area: git reset --softstaging area-->working directory: git reset --mixedNote right of working directory: git reset --hard\n git clean -df</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/git/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 포스팅은 git을 하면서 사소한 실수를 했을때 대처하는 방법에 대해서 정리해보겠습니다.&lt;br&gt;우선 git 연습을 하기 위한 빈 디
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Git" scheme="http://jason0853.github.io/categories/Ops/Git/"/>
    
    
      <category term="git" scheme="http://jason0853.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git basic</title>
    <link href="http://jason0853.github.io/2017/12/16/Git-basic/"/>
    <id>http://jason0853.github.io/2017/12/16/Git-basic/</id>
    <published>2017-12-16T13:09:59.000Z</published>
    <updated>2019-05-18T06:10:55.386Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/git/git-logo.png" alt=""></p><p>프로젝트를 시작하게 되면 여러 개발자들과 협업을 진행하게 됩니다. 특히 협업할 때 source 관리를 해야되는데 가장 많이 사용하는 git에 대해 한번 살펴보겠습니다. 이번 포스팅에서는 가장 빈번하게 사용되는 명령어와 git의 흐름 상황을 요약 정리해보겠습니다.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Check-version"><a href="#Check-version" class="headerlink" title="# Check version"></a># Check version</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br></pre></td></tr></table></figure><ul><li>git이 제대로 설치되어 있는지 확인하려면 version 체크를 하시면 됩니다.</li></ul><h3 id="Set-config-values"><a href="#Set-config-values" class="headerlink" title="# Set config values"></a># Set config values</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">'username'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">'your email'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br></pre></td></tr></table></figure><ul><li><code>global</code> 옵션을 주어 git의 사용자와 이메일을 셋팅해 줄 수 있습니다.</li><li><code>list</code> 옵션을 통하여 셋팅된 목록을 볼 수 있습니다.</li><li>만약 global property를 삭제하고 싶은 경우는 <code>unset</code> 옵션을 추가하여 해당 property를 지우시면 됩니다.<br>ex)<code>git config –global –unset user.name</code></li></ul><h3 id="Initialize-a-repository"><a href="#Initialize-a-repository" class="headerlink" title="# Initialize a repository"></a># Initialize a repository</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><ul><li>프로젝트 root 디렉토리에서 <code>init</code> 명령어를 통하여 초기화 시킨 이후 <em>.git</em>이라는 파일이 생성됩니다.</li></ul><h3 id="Create-a-gitignore-file"><a href="#Create-a-gitignore-file" class="headerlink" title="# Create a gitignore file"></a># Create a gitignore file</h3><script src="//gist.github.com/9f4a098f09452ac869722e1192f679bf.js"></script><ul><li>root 디렉토리에 <em>.gitignore</em> 파일을 만듭니다.</li><li><em>.gitignore</em> 파일은 git을 통해 소스관리를 할 필요 없는 파일이나 폴더명을 써주시면 됩니다.</li></ul><h3 id="Common-workflow"><a href="#Common-workflow" class="headerlink" title="# Common workflow"></a># Common workflow</h3><div id="sequence-0"></div><p>각각의 명령어를 실행하면 어떤 상태인지를 disagram으로 정리해보았습니다. 그럼 위에 나온 명령어들과 함께 간단한 실습을 한번 진행해보겠습니다.</p><p><img src="../../../../images/git/git-basic-01.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><ul><li>우선 <em>git-test</em> 라는 프로젝트 폴더 하나를 만들고 앞서 얘기했던 <code>git init</code> 작업과 <em>.gitignore</em> 파일을 생성하였습니다.</li><li><code>git status</code>는 파일의 현재 상태를 알려줍니다. commit을 한번도 진행하지 않았기 때문에 새로 생성된 file은 <strong>Untracked files</strong>로 분류되어 있습니다.</li></ul><p><img src="../../../../images/git/git-basic-02.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'your commit message'</span></span></span><br></pre></td></tr></table></figure><ul><li>현재는 <em>.gitignore</em> 파일 하나만 있어서 <code>git add .gitignore</code> 이런식으로 명령어를 입력해도 되지만 여러 파일들을 한번에 staging area로 옮기는 작업을 할려면 간단하게 <code>A</code> 옵션을 주면 됩니다.</li><li>staging area에 잘 옮겨졌는지 체크해보려면 <code>git status</code> 명령어를 실행시킵니다. 아까와 다르게 녹색 컬러로 변경된 <em>.gitignore</em> 파일을 확인할 수 있습니다.</li><li><code>commit</code> 명령어를 통하여 staging area에서 local repository로 옮기고 git 상태를 체크해봅니다. 터미널 캡쳐 마지막 부분을 보면은 <em>nothing to commit</em> 이라고 나옵니다. 더 이상 커밋 작업을 할게 없으므로 <code>push</code> 작업을 할 차례입니다.</li></ul><p><img src="../../../../images/git/git-basic-03.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin <span class="string">'your remote url'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><ul><li><code>push</code> 작업을 하기 위해서는 원격저장소를 추가해야합니다. 필자는 github를 사용하여 원격저장소를 만들었지만 Bitbucket, gitlab 등을 사용하셔도 됩니다.</li><li>remote url을 추가한 뒤에 <code>v</code> 옵션을 통해 단축이름과 url을 함께 볼 수 있습니다.</li><li><code>u</code> 옵션을 추가하면은 <code>push</code> 작업 및 <code>pull</code> 작업을 진행할때 <code>origin master</code>를 명령어와 함께 실행시키지 않아도 됩니다.<br>ex)<code>git push</code> / <code>git pull</code></li></ul><p><img src="../../../../images/git/git-basic-04.png" alt=""></p><p>작업이 끝난 뒤 자신의 원격저장소에서 확인해보면 <code>.gitignore</code> 파일이 저장되어 있습니다.<br>하지만 보통 회사에서 일할 때는 master 브랜치에서 작업하는 경우는 거의 없습니다. 다수의 개발자들과 서로 협업을 해야하므로 각각 브랜치(branch)를 생성해서 이동(checkout)한 다음에 코딩작업을 진행합니다. 코딩작업이 끝난 이후에는 각 개발자들의 작업내역을 master 브랜치로 병합(merge)시킵니다.<br>그럼 이어서 한번 진행해보겠습니다.</p><p><img src="../../../../images/git/git-basic-05.png" alt=""></p><figure class="highlight asciidoc"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node<span class="emphasis">_modules</span></span><br><span class="line"><span class="emphasis">dist</span></span><br><span class="line"><span class="emphasis">.env</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch <span class="string">'new branch name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout <span class="string">'branch name'</span></span></span><br></pre></td></tr></table></figure><ul><li>필자는 test라는 새로운 브랜치를 하나 생성해서 작업을 진행을 했습니다.</li><li>새로운 브랜치를 만들고 나서 제대로 생성되었는지 확인하려면 <code>git branch</code> 명령어를 실행시켜줍니다.</li><li>test 브랜치로 이동하기 위해서 <code>git checkout test</code> 명령어를 실행시켜줍니다.<br><strong><em>이 때 기존 master(local) 브랜치에 있는 source가 test 브랜치로 복사됩니다.</em></strong></li><li><code>git status</code>로 파일의 체크 상태를 체크해보면 .gitignore 파일은 <strong>Untracked files</strong>로 분류되어 있지 않습니다.<br><strong><em>그 이유는 이미 commit한 files들은 git에 의해 tracking이 되고 있기 때문입니다. 반대로 index.html은 새로 생성한 다음에 commit 작업을 한번도 진행하지 않았기 때문에 Untracked files로 분류되어 있는 것입니다.</em></strong></li></ul><p><img src="../../../../images/git/git-basic-06.png" alt=""><br><img src="../../../../images/git/git-basic-07.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br></pre></td></tr></table></figure><ul><li><code>add</code>, <code>commit</code>, <code>push</code> 작업을 순서대로 진행합니다.</li><li>원격저장소에서 test 브랜치로 바꾼 다음 확인하면 위 그림과 같이 푸쉬한 파일들과 commit message들을 확인할 수 있습니다.</li><li><code>a</code> 옵션과 함께 <code>git branch</code> 명령어를 실행시켜면 local 브랜치와 remote 브랜치 둘 다 확인할 수 있습니다.</li><li>test 브랜치에서의 작업이 다 끝났으므로 <code>merge</code> 작업을 진행해보겠습니다.</li></ul><p><img src="../../../../images/git/git-basic-08.png" alt=""><br><img src="../../../../images/git/git-basic-09.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --no-merged</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge <span class="string">'branch name'</span></span></span><br></pre></td></tr></table></figure><ul><li>master 브랜치에서 test 브랜치를 병합시킬 것이기 때문에 <code>checkout</code>을 통해 master 브랜치로 이동했습니다.<br><strong><em>이미 만들어진 브랜치로 checkout 작업을 진행한 경우에는 source의 변경사항이 없습니다.</em></strong></li><li>브랜치를 변경한 이후에 <code>pull</code> 작업을 하는 이유는 remote master 브랜치와 local master 브랜치의 source를 동기화시키기 위해서입니다.<br><strong><em>항상 브랜치를 checkout한 경우에는 conflict를 최소화하기 위해 원격 작업 내역을 병합한 다음 자신의 작업내역을 진행하는 습관을 들이는 것이 좋습니다. </em></strong></li><li><code>no-merged</code> 옵션을 통하여 병합하지 않은 branch list를 확인합니다.</li><li>test 브랜치를 master 브랜치로 병합시킵니다. 이때 <em>Fast-forward</em>라는 메세지가 나오면서 순식간에 병합이 일어납니다. 즉, merge 할 test 브랜치가 master 브랜치가 가리키는 것보다 앞으로 진행한 commit 이기 때문에 master 브랜치 포인터는 최신 커밋으로 이동하는 방식을 일컫는 말입니다.</li><li>push 작업을 한 뒤 github에 master 브랜치 작업내역을 확인합니다.</li></ul><p><img src="../../../../images/git/git-basic-10.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --merged</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d <span class="string">'branch name'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete <span class="string">'remote branch name'</span></span></span><br></pre></td></tr></table></figure><ul><li><code>merged</code> 옵션을 통하여 merge한 브랜치 list를 보여줍니다.</li><li>로컬 브랜치(master, test) 코드가 동일해졌으니 <code>d</code> 옵션을 주어 필요없는 test 브랜치를 삭제해줍니다.</li><li>원격 브랜치(remotes/origin/master, remotes/origin/test) 코드도 동일해졌으니 원격 test 브랜치도 삭제시켜줍니다. <code>delete</code> 옵션을 통해 푸쉬합니다.</li></ul><p><img src="../../../../images/git/git-basic-11.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --all --decorate --graph --oneline --<span class="built_in">stat</span></span></span><br></pre></td></tr></table></figure><ul><li>왼쪽 터미널은 test 브랜치를 삭제하고 나서 log를 확인한 것이며 오른쪽 터미널은 브랜치를 삭제하기 전의 log 캡쳐 사진입니다.</li><li>commit history를 확인합니다.<ul><li><code>all</code> - refs/의 모든 참조들의 log들을 출력시켜줍니다.</li><li><code>decorate</code> - commit id 오른쪽에 현재 위치해있는 브랜치 name을 보여줍니다.</li><li><code>graph</code> - commit id 왼쪽에 line을 생성하여 commit log를 좀 더 시각화 시켜줍니다. 브랜치들간의 차이를 좀 더 쉽게 파악할 수 있습니다.</li><li><code>oneline</code> - 한줄로 요약해서 보여줍니다.</li><li><code>stat</code> - 변경된 파일들의 목록을 보여줍니다.</li></ul></li></ul><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><p>지금까지 git의 기초와 일반적인 workflow에 대해 알아보았습니다. 실무에서는 이보다 훨씬 더 복잡한 구조로 되어 있기 때문에 기본 개념을 제대로 이해하셔야 conflict 났을 경우 대처하기가 쉽습니다. command line 이 익숙하지 않은 분들에게는 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>라는 GUI 툴을 추천합니다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88" target="_blank" rel="noopener">Git documentation - 브랜치와 Merge의 기초</a></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">working directory->staging area: git addstaging area->local repo: git commitlocal repo->remote repo: git pushremote repo-->working directory: git pulllocal repo-->working directory: git checkoutlocal repo-->working directory: git merge</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/git/git-logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;프로젝트를 시작하게 되면 여러 개발자들과 협업을 진행하게 됩니다. 특히 협업할 때 source 관리를 해야되는데 가장 많이 사용하는 g
      
    
    </summary>
    
      <category term="Ops" scheme="http://jason0853.github.io/categories/Ops/"/>
    
      <category term="Git" scheme="http://jason0853.github.io/categories/Ops/Git/"/>
    
    
      <category term="git" scheme="http://jason0853.github.io/tags/git/"/>
    
  </entry>
  
</feed>
